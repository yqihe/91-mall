// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user_admin/biz/model/model"
)

func newUmsAdmin(db *gorm.DB, opts ...gen.DOOption) umsAdmin {
	_umsAdmin := umsAdmin{}

	_umsAdmin.umsAdminDo.UseDB(db, opts...)
	_umsAdmin.umsAdminDo.UseModel(&model.UmsAdmin{})

	tableName := _umsAdmin.umsAdminDo.TableName()
	_umsAdmin.ALL = field.NewAsterisk(tableName)
	_umsAdmin.ID = field.NewInt64(tableName, "id")
	_umsAdmin.Username = field.NewString(tableName, "username")
	_umsAdmin.Password = field.NewString(tableName, "password")
	_umsAdmin.Icon = field.NewString(tableName, "icon")
	_umsAdmin.Email = field.NewString(tableName, "email")
	_umsAdmin.NickName = field.NewString(tableName, "nick_name")
	_umsAdmin.Note = field.NewString(tableName, "note")
	_umsAdmin.CreateTime = field.NewTime(tableName, "create_time")
	_umsAdmin.LoginTime = field.NewTime(tableName, "login_time")
	_umsAdmin.Status = field.NewInt32(tableName, "status")

	_umsAdmin.fillFieldMap()

	return _umsAdmin
}

// umsAdmin 后台用户表
type umsAdmin struct {
	umsAdminDo umsAdminDo

	ALL        field.Asterisk
	ID         field.Int64
	Username   field.String
	Password   field.String
	Icon       field.String // 头像
	Email      field.String // 邮箱
	NickName   field.String // 昵称
	Note       field.String // 备注信息
	CreateTime field.Time   // 创建时间
	LoginTime  field.Time   // 最后登录时间
	Status     field.Int32  // 帐号启用状态：0->禁用；1->启用

	fieldMap map[string]field.Expr
}

func (u umsAdmin) Table(newTableName string) *umsAdmin {
	u.umsAdminDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdmin) As(alias string) *umsAdmin {
	u.umsAdminDo.DO = *(u.umsAdminDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdmin) updateTableName(table string) *umsAdmin {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Icon = field.NewString(table, "icon")
	u.Email = field.NewString(table, "email")
	u.NickName = field.NewString(table, "nick_name")
	u.Note = field.NewString(table, "note")
	u.CreateTime = field.NewTime(table, "create_time")
	u.LoginTime = field.NewTime(table, "login_time")
	u.Status = field.NewInt32(table, "status")

	u.fillFieldMap()

	return u
}

func (u *umsAdmin) WithContext(ctx context.Context) IUmsAdminDo { return u.umsAdminDo.WithContext(ctx) }

func (u umsAdmin) TableName() string { return u.umsAdminDo.TableName() }

func (u umsAdmin) Alias() string { return u.umsAdminDo.Alias() }

func (u umsAdmin) Columns(cols ...field.Expr) gen.Columns { return u.umsAdminDo.Columns(cols...) }

func (u *umsAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdmin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["email"] = u.Email
	u.fieldMap["nick_name"] = u.NickName
	u.fieldMap["note"] = u.Note
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["login_time"] = u.LoginTime
	u.fieldMap["status"] = u.Status
}

func (u umsAdmin) clone(db *gorm.DB) umsAdmin {
	u.umsAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsAdmin) replaceDB(db *gorm.DB) umsAdmin {
	u.umsAdminDo.ReplaceDB(db)
	return u
}

type umsAdminDo struct{ gen.DO }

type IUmsAdminDo interface {
	gen.SubQuery
	Debug() IUmsAdminDo
	WithContext(ctx context.Context) IUmsAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsAdminDo
	WriteDB() IUmsAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsAdminDo
	Not(conds ...gen.Condition) IUmsAdminDo
	Or(conds ...gen.Condition) IUmsAdminDo
	Select(conds ...field.Expr) IUmsAdminDo
	Where(conds ...gen.Condition) IUmsAdminDo
	Order(conds ...field.Expr) IUmsAdminDo
	Distinct(cols ...field.Expr) IUmsAdminDo
	Omit(cols ...field.Expr) IUmsAdminDo
	Join(table schema.Tabler, on ...field.Expr) IUmsAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminDo
	Group(cols ...field.Expr) IUmsAdminDo
	Having(conds ...gen.Condition) IUmsAdminDo
	Limit(limit int) IUmsAdminDo
	Offset(offset int) IUmsAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminDo
	Unscoped() IUmsAdminDo
	Create(values ...*model.UmsAdmin) error
	CreateInBatches(values []*model.UmsAdmin, batchSize int) error
	Save(values ...*model.UmsAdmin) error
	First() (*model.UmsAdmin, error)
	Take() (*model.UmsAdmin, error)
	Last() (*model.UmsAdmin, error)
	Find() ([]*model.UmsAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdmin, err error)
	FindInBatches(result *[]*model.UmsAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsAdminDo
	Assign(attrs ...field.AssignExpr) IUmsAdminDo
	Joins(fields ...field.RelationField) IUmsAdminDo
	Preload(fields ...field.RelationField) IUmsAdminDo
	FirstOrInit() (*model.UmsAdmin, error)
	FirstOrCreate() (*model.UmsAdmin, error)
	FindByPage(offset int, limit int) (result []*model.UmsAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsAdminDo) Debug() IUmsAdminDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminDo) WithContext(ctx context.Context) IUmsAdminDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminDo) ReadDB() IUmsAdminDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminDo) WriteDB() IUmsAdminDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminDo) Session(config *gorm.Session) IUmsAdminDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsAdminDo) Clauses(conds ...clause.Expression) IUmsAdminDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminDo) Returning(value interface{}, columns ...string) IUmsAdminDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminDo) Not(conds ...gen.Condition) IUmsAdminDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminDo) Or(conds ...gen.Condition) IUmsAdminDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminDo) Select(conds ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminDo) Where(conds ...gen.Condition) IUmsAdminDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminDo) Order(conds ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminDo) Distinct(cols ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminDo) Omit(cols ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminDo) Join(table schema.Tabler, on ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminDo) Group(cols ...field.Expr) IUmsAdminDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminDo) Having(conds ...gen.Condition) IUmsAdminDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminDo) Limit(limit int) IUmsAdminDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminDo) Offset(offset int) IUmsAdminDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminDo) Unscoped() IUmsAdminDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminDo) Create(values ...*model.UmsAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminDo) CreateInBatches(values []*model.UmsAdmin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminDo) Save(values ...*model.UmsAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminDo) First() (*model.UmsAdmin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Take() (*model.UmsAdmin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Last() (*model.UmsAdmin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Find() ([]*model.UmsAdmin, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdmin), err
}

func (u umsAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdmin, err error) {
	buf := make([]*model.UmsAdmin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminDo) FindInBatches(result *[]*model.UmsAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminDo) Attrs(attrs ...field.AssignExpr) IUmsAdminDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminDo) Assign(attrs ...field.AssignExpr) IUmsAdminDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminDo) Joins(fields ...field.RelationField) IUmsAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminDo) Preload(fields ...field.RelationField) IUmsAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminDo) FirstOrInit() (*model.UmsAdmin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) FirstOrCreate() (*model.UmsAdmin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) FindByPage(offset int, limit int) (result []*model.UmsAdmin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminDo) Delete(models ...*model.UmsAdmin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminDo) withDO(do gen.Dao) *umsAdminDo {
	u.DO = *do.(*gen.DO)
	return u
}
