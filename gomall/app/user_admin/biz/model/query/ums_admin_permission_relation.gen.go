// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user_admin/biz/model/model"
)

func newUmsAdminPermissionRelation(db *gorm.DB, opts ...gen.DOOption) umsAdminPermissionRelation {
	_umsAdminPermissionRelation := umsAdminPermissionRelation{}

	_umsAdminPermissionRelation.umsAdminPermissionRelationDo.UseDB(db, opts...)
	_umsAdminPermissionRelation.umsAdminPermissionRelationDo.UseModel(&model.UmsAdminPermissionRelation{})

	tableName := _umsAdminPermissionRelation.umsAdminPermissionRelationDo.TableName()
	_umsAdminPermissionRelation.ALL = field.NewAsterisk(tableName)
	_umsAdminPermissionRelation.ID = field.NewInt64(tableName, "id")
	_umsAdminPermissionRelation.AdminID = field.NewInt64(tableName, "admin_id")
	_umsAdminPermissionRelation.PermissionID = field.NewInt64(tableName, "permission_id")
	_umsAdminPermissionRelation.Type = field.NewInt32(tableName, "type")

	_umsAdminPermissionRelation.fillFieldMap()

	return _umsAdminPermissionRelation
}

// umsAdminPermissionRelation 后台用户和权限关系表(除角色中定义的权限以外的加减权限)
type umsAdminPermissionRelation struct {
	umsAdminPermissionRelationDo umsAdminPermissionRelationDo

	ALL          field.Asterisk
	ID           field.Int64
	AdminID      field.Int64
	PermissionID field.Int64
	Type         field.Int32

	fieldMap map[string]field.Expr
}

func (u umsAdminPermissionRelation) Table(newTableName string) *umsAdminPermissionRelation {
	u.umsAdminPermissionRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdminPermissionRelation) As(alias string) *umsAdminPermissionRelation {
	u.umsAdminPermissionRelationDo.DO = *(u.umsAdminPermissionRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdminPermissionRelation) updateTableName(table string) *umsAdminPermissionRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.PermissionID = field.NewInt64(table, "permission_id")
	u.Type = field.NewInt32(table, "type")

	u.fillFieldMap()

	return u
}

func (u *umsAdminPermissionRelation) WithContext(ctx context.Context) IUmsAdminPermissionRelationDo {
	return u.umsAdminPermissionRelationDo.WithContext(ctx)
}

func (u umsAdminPermissionRelation) TableName() string {
	return u.umsAdminPermissionRelationDo.TableName()
}

func (u umsAdminPermissionRelation) Alias() string { return u.umsAdminPermissionRelationDo.Alias() }

func (u umsAdminPermissionRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsAdminPermissionRelationDo.Columns(cols...)
}

func (u *umsAdminPermissionRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdminPermissionRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["permission_id"] = u.PermissionID
	u.fieldMap["type"] = u.Type
}

func (u umsAdminPermissionRelation) clone(db *gorm.DB) umsAdminPermissionRelation {
	u.umsAdminPermissionRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsAdminPermissionRelation) replaceDB(db *gorm.DB) umsAdminPermissionRelation {
	u.umsAdminPermissionRelationDo.ReplaceDB(db)
	return u
}

type umsAdminPermissionRelationDo struct{ gen.DO }

type IUmsAdminPermissionRelationDo interface {
	gen.SubQuery
	Debug() IUmsAdminPermissionRelationDo
	WithContext(ctx context.Context) IUmsAdminPermissionRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsAdminPermissionRelationDo
	WriteDB() IUmsAdminPermissionRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsAdminPermissionRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsAdminPermissionRelationDo
	Not(conds ...gen.Condition) IUmsAdminPermissionRelationDo
	Or(conds ...gen.Condition) IUmsAdminPermissionRelationDo
	Select(conds ...field.Expr) IUmsAdminPermissionRelationDo
	Where(conds ...gen.Condition) IUmsAdminPermissionRelationDo
	Order(conds ...field.Expr) IUmsAdminPermissionRelationDo
	Distinct(cols ...field.Expr) IUmsAdminPermissionRelationDo
	Omit(cols ...field.Expr) IUmsAdminPermissionRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo
	Group(cols ...field.Expr) IUmsAdminPermissionRelationDo
	Having(conds ...gen.Condition) IUmsAdminPermissionRelationDo
	Limit(limit int) IUmsAdminPermissionRelationDo
	Offset(offset int) IUmsAdminPermissionRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminPermissionRelationDo
	Unscoped() IUmsAdminPermissionRelationDo
	Create(values ...*model.UmsAdminPermissionRelation) error
	CreateInBatches(values []*model.UmsAdminPermissionRelation, batchSize int) error
	Save(values ...*model.UmsAdminPermissionRelation) error
	First() (*model.UmsAdminPermissionRelation, error)
	Take() (*model.UmsAdminPermissionRelation, error)
	Last() (*model.UmsAdminPermissionRelation, error)
	Find() ([]*model.UmsAdminPermissionRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminPermissionRelation, err error)
	FindInBatches(result *[]*model.UmsAdminPermissionRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsAdminPermissionRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsAdminPermissionRelationDo
	Assign(attrs ...field.AssignExpr) IUmsAdminPermissionRelationDo
	Joins(fields ...field.RelationField) IUmsAdminPermissionRelationDo
	Preload(fields ...field.RelationField) IUmsAdminPermissionRelationDo
	FirstOrInit() (*model.UmsAdminPermissionRelation, error)
	FirstOrCreate() (*model.UmsAdminPermissionRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsAdminPermissionRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsAdminPermissionRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsAdminPermissionRelationDo) Debug() IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminPermissionRelationDo) WithContext(ctx context.Context) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminPermissionRelationDo) ReadDB() IUmsAdminPermissionRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminPermissionRelationDo) WriteDB() IUmsAdminPermissionRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminPermissionRelationDo) Session(config *gorm.Session) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsAdminPermissionRelationDo) Clauses(conds ...clause.Expression) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminPermissionRelationDo) Returning(value interface{}, columns ...string) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminPermissionRelationDo) Not(conds ...gen.Condition) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminPermissionRelationDo) Or(conds ...gen.Condition) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminPermissionRelationDo) Select(conds ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminPermissionRelationDo) Where(conds ...gen.Condition) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminPermissionRelationDo) Order(conds ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminPermissionRelationDo) Distinct(cols ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminPermissionRelationDo) Omit(cols ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminPermissionRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminPermissionRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminPermissionRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminPermissionRelationDo) Group(cols ...field.Expr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminPermissionRelationDo) Having(conds ...gen.Condition) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminPermissionRelationDo) Limit(limit int) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminPermissionRelationDo) Offset(offset int) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminPermissionRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminPermissionRelationDo) Unscoped() IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminPermissionRelationDo) Create(values ...*model.UmsAdminPermissionRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminPermissionRelationDo) CreateInBatches(values []*model.UmsAdminPermissionRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminPermissionRelationDo) Save(values ...*model.UmsAdminPermissionRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminPermissionRelationDo) First() (*model.UmsAdminPermissionRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminPermissionRelation), nil
	}
}

func (u umsAdminPermissionRelationDo) Take() (*model.UmsAdminPermissionRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminPermissionRelation), nil
	}
}

func (u umsAdminPermissionRelationDo) Last() (*model.UmsAdminPermissionRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminPermissionRelation), nil
	}
}

func (u umsAdminPermissionRelationDo) Find() ([]*model.UmsAdminPermissionRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdminPermissionRelation), err
}

func (u umsAdminPermissionRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminPermissionRelation, err error) {
	buf := make([]*model.UmsAdminPermissionRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminPermissionRelationDo) FindInBatches(result *[]*model.UmsAdminPermissionRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminPermissionRelationDo) Attrs(attrs ...field.AssignExpr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminPermissionRelationDo) Assign(attrs ...field.AssignExpr) IUmsAdminPermissionRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminPermissionRelationDo) Joins(fields ...field.RelationField) IUmsAdminPermissionRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminPermissionRelationDo) Preload(fields ...field.RelationField) IUmsAdminPermissionRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminPermissionRelationDo) FirstOrInit() (*model.UmsAdminPermissionRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminPermissionRelation), nil
	}
}

func (u umsAdminPermissionRelationDo) FirstOrCreate() (*model.UmsAdminPermissionRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminPermissionRelation), nil
	}
}

func (u umsAdminPermissionRelationDo) FindByPage(offset int, limit int) (result []*model.UmsAdminPermissionRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminPermissionRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminPermissionRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminPermissionRelationDo) Delete(models ...*model.UmsAdminPermissionRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminPermissionRelationDo) withDO(do gen.Dao) *umsAdminPermissionRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
