// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user_admin/biz/model/model"
)

func newUmsRole(db *gorm.DB, opts ...gen.DOOption) umsRole {
	_umsRole := umsRole{}

	_umsRole.umsRoleDo.UseDB(db, opts...)
	_umsRole.umsRoleDo.UseModel(&model.UmsRole{})

	tableName := _umsRole.umsRoleDo.TableName()
	_umsRole.ALL = field.NewAsterisk(tableName)
	_umsRole.ID = field.NewInt64(tableName, "id")
	_umsRole.Name = field.NewString(tableName, "name")
	_umsRole.Description = field.NewString(tableName, "description")
	_umsRole.AdminCount = field.NewInt32(tableName, "admin_count")
	_umsRole.CreateTime = field.NewTime(tableName, "create_time")
	_umsRole.Status = field.NewInt32(tableName, "status")
	_umsRole.Sort = field.NewInt32(tableName, "sort")

	_umsRole.fillFieldMap()

	return _umsRole
}

// umsRole 后台用户角色表
type umsRole struct {
	umsRoleDo umsRoleDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String // 名称
	Description field.String // 描述
	AdminCount  field.Int32  // 后台用户数量
	CreateTime  field.Time   // 创建时间
	Status      field.Int32  // 启用状态：0->禁用；1->启用
	Sort        field.Int32

	fieldMap map[string]field.Expr
}

func (u umsRole) Table(newTableName string) *umsRole {
	u.umsRoleDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRole) As(alias string) *umsRole {
	u.umsRoleDo.DO = *(u.umsRoleDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRole) updateTableName(table string) *umsRole {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Description = field.NewString(table, "description")
	u.AdminCount = field.NewInt32(table, "admin_count")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Status = field.NewInt32(table, "status")
	u.Sort = field.NewInt32(table, "sort")

	u.fillFieldMap()

	return u
}

func (u *umsRole) WithContext(ctx context.Context) IUmsRoleDo { return u.umsRoleDo.WithContext(ctx) }

func (u umsRole) TableName() string { return u.umsRoleDo.TableName() }

func (u umsRole) Alias() string { return u.umsRoleDo.Alias() }

func (u umsRole) Columns(cols ...field.Expr) gen.Columns { return u.umsRoleDo.Columns(cols...) }

func (u *umsRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRole) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["description"] = u.Description
	u.fieldMap["admin_count"] = u.AdminCount
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["status"] = u.Status
	u.fieldMap["sort"] = u.Sort
}

func (u umsRole) clone(db *gorm.DB) umsRole {
	u.umsRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsRole) replaceDB(db *gorm.DB) umsRole {
	u.umsRoleDo.ReplaceDB(db)
	return u
}

type umsRoleDo struct{ gen.DO }

type IUmsRoleDo interface {
	gen.SubQuery
	Debug() IUmsRoleDo
	WithContext(ctx context.Context) IUmsRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsRoleDo
	WriteDB() IUmsRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsRoleDo
	Not(conds ...gen.Condition) IUmsRoleDo
	Or(conds ...gen.Condition) IUmsRoleDo
	Select(conds ...field.Expr) IUmsRoleDo
	Where(conds ...gen.Condition) IUmsRoleDo
	Order(conds ...field.Expr) IUmsRoleDo
	Distinct(cols ...field.Expr) IUmsRoleDo
	Omit(cols ...field.Expr) IUmsRoleDo
	Join(table schema.Tabler, on ...field.Expr) IUmsRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleDo
	Group(cols ...field.Expr) IUmsRoleDo
	Having(conds ...gen.Condition) IUmsRoleDo
	Limit(limit int) IUmsRoleDo
	Offset(offset int) IUmsRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleDo
	Unscoped() IUmsRoleDo
	Create(values ...*model.UmsRole) error
	CreateInBatches(values []*model.UmsRole, batchSize int) error
	Save(values ...*model.UmsRole) error
	First() (*model.UmsRole, error)
	Take() (*model.UmsRole, error)
	Last() (*model.UmsRole, error)
	Find() ([]*model.UmsRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRole, err error)
	FindInBatches(result *[]*model.UmsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsRoleDo
	Assign(attrs ...field.AssignExpr) IUmsRoleDo
	Joins(fields ...field.RelationField) IUmsRoleDo
	Preload(fields ...field.RelationField) IUmsRoleDo
	FirstOrInit() (*model.UmsRole, error)
	FirstOrCreate() (*model.UmsRole, error)
	FindByPage(offset int, limit int) (result []*model.UmsRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsRoleDo) Debug() IUmsRoleDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRoleDo) WithContext(ctx context.Context) IUmsRoleDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRoleDo) ReadDB() IUmsRoleDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRoleDo) WriteDB() IUmsRoleDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRoleDo) Session(config *gorm.Session) IUmsRoleDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsRoleDo) Clauses(conds ...clause.Expression) IUmsRoleDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRoleDo) Returning(value interface{}, columns ...string) IUmsRoleDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRoleDo) Not(conds ...gen.Condition) IUmsRoleDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRoleDo) Or(conds ...gen.Condition) IUmsRoleDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRoleDo) Select(conds ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRoleDo) Where(conds ...gen.Condition) IUmsRoleDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRoleDo) Order(conds ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRoleDo) Distinct(cols ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRoleDo) Omit(cols ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRoleDo) Join(table schema.Tabler, on ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRoleDo) Group(cols ...field.Expr) IUmsRoleDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRoleDo) Having(conds ...gen.Condition) IUmsRoleDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRoleDo) Limit(limit int) IUmsRoleDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRoleDo) Offset(offset int) IUmsRoleDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRoleDo) Unscoped() IUmsRoleDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRoleDo) Create(values ...*model.UmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRoleDo) CreateInBatches(values []*model.UmsRole, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRoleDo) Save(values ...*model.UmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRoleDo) First() (*model.UmsRole, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Take() (*model.UmsRole, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Last() (*model.UmsRole, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Find() ([]*model.UmsRole, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRole), err
}

func (u umsRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRole, err error) {
	buf := make([]*model.UmsRole, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRoleDo) FindInBatches(result *[]*model.UmsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRoleDo) Attrs(attrs ...field.AssignExpr) IUmsRoleDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRoleDo) Assign(attrs ...field.AssignExpr) IUmsRoleDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRoleDo) Joins(fields ...field.RelationField) IUmsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRoleDo) Preload(fields ...field.RelationField) IUmsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRoleDo) FirstOrInit() (*model.UmsRole, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) FirstOrCreate() (*model.UmsRole, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) FindByPage(offset int, limit int) (result []*model.UmsRole, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRoleDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRoleDo) Delete(models ...*model.UmsRole) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRoleDo) withDO(do gen.Dao) *umsRoleDo {
	u.DO = *do.(*gen.DO)
	return u
}
