// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user_admin/biz/model/model"
)

func newUmsMemberStatisticsInfo(db *gorm.DB, opts ...gen.DOOption) umsMemberStatisticsInfo {
	_umsMemberStatisticsInfo := umsMemberStatisticsInfo{}

	_umsMemberStatisticsInfo.umsMemberStatisticsInfoDo.UseDB(db, opts...)
	_umsMemberStatisticsInfo.umsMemberStatisticsInfoDo.UseModel(&model.UmsMemberStatisticsInfo{})

	tableName := _umsMemberStatisticsInfo.umsMemberStatisticsInfoDo.TableName()
	_umsMemberStatisticsInfo.ALL = field.NewAsterisk(tableName)
	_umsMemberStatisticsInfo.ID = field.NewInt64(tableName, "id")
	_umsMemberStatisticsInfo.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberStatisticsInfo.ConsumeAmount = field.NewFloat64(tableName, "consume_amount")
	_umsMemberStatisticsInfo.OrderCount = field.NewInt32(tableName, "order_count")
	_umsMemberStatisticsInfo.CouponCount = field.NewInt32(tableName, "coupon_count")
	_umsMemberStatisticsInfo.CommentCount = field.NewInt32(tableName, "comment_count")
	_umsMemberStatisticsInfo.ReturnOrderCount = field.NewInt32(tableName, "return_order_count")
	_umsMemberStatisticsInfo.LoginCount = field.NewInt32(tableName, "login_count")
	_umsMemberStatisticsInfo.AttendCount = field.NewInt32(tableName, "attend_count")
	_umsMemberStatisticsInfo.FansCount = field.NewInt32(tableName, "fans_count")
	_umsMemberStatisticsInfo.CollectProductCount = field.NewInt32(tableName, "collect_product_count")
	_umsMemberStatisticsInfo.CollectSubjectCount = field.NewInt32(tableName, "collect_subject_count")
	_umsMemberStatisticsInfo.CollectTopicCount = field.NewInt32(tableName, "collect_topic_count")
	_umsMemberStatisticsInfo.CollectCommentCount = field.NewInt32(tableName, "collect_comment_count")
	_umsMemberStatisticsInfo.InviteFriendCount = field.NewInt32(tableName, "invite_friend_count")
	_umsMemberStatisticsInfo.RecentOrderTime = field.NewTime(tableName, "recent_order_time")

	_umsMemberStatisticsInfo.fillFieldMap()

	return _umsMemberStatisticsInfo
}

// umsMemberStatisticsInfo 会员统计信息
type umsMemberStatisticsInfo struct {
	umsMemberStatisticsInfoDo umsMemberStatisticsInfoDo

	ALL                 field.Asterisk
	ID                  field.Int64
	MemberID            field.Int64
	ConsumeAmount       field.Float64 // 累计消费金额
	OrderCount          field.Int32   // 订单数量
	CouponCount         field.Int32   // 优惠券数量
	CommentCount        field.Int32   // 评价数
	ReturnOrderCount    field.Int32   // 退货数量
	LoginCount          field.Int32   // 登录次数
	AttendCount         field.Int32   // 关注数量
	FansCount           field.Int32   // 粉丝数量
	CollectProductCount field.Int32
	CollectSubjectCount field.Int32
	CollectTopicCount   field.Int32
	CollectCommentCount field.Int32
	InviteFriendCount   field.Int32
	RecentOrderTime     field.Time // 最后一次下订单时间

	fieldMap map[string]field.Expr
}

func (u umsMemberStatisticsInfo) Table(newTableName string) *umsMemberStatisticsInfo {
	u.umsMemberStatisticsInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberStatisticsInfo) As(alias string) *umsMemberStatisticsInfo {
	u.umsMemberStatisticsInfoDo.DO = *(u.umsMemberStatisticsInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberStatisticsInfo) updateTableName(table string) *umsMemberStatisticsInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.ConsumeAmount = field.NewFloat64(table, "consume_amount")
	u.OrderCount = field.NewInt32(table, "order_count")
	u.CouponCount = field.NewInt32(table, "coupon_count")
	u.CommentCount = field.NewInt32(table, "comment_count")
	u.ReturnOrderCount = field.NewInt32(table, "return_order_count")
	u.LoginCount = field.NewInt32(table, "login_count")
	u.AttendCount = field.NewInt32(table, "attend_count")
	u.FansCount = field.NewInt32(table, "fans_count")
	u.CollectProductCount = field.NewInt32(table, "collect_product_count")
	u.CollectSubjectCount = field.NewInt32(table, "collect_subject_count")
	u.CollectTopicCount = field.NewInt32(table, "collect_topic_count")
	u.CollectCommentCount = field.NewInt32(table, "collect_comment_count")
	u.InviteFriendCount = field.NewInt32(table, "invite_friend_count")
	u.RecentOrderTime = field.NewTime(table, "recent_order_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberStatisticsInfo) WithContext(ctx context.Context) IUmsMemberStatisticsInfoDo {
	return u.umsMemberStatisticsInfoDo.WithContext(ctx)
}

func (u umsMemberStatisticsInfo) TableName() string { return u.umsMemberStatisticsInfoDo.TableName() }

func (u umsMemberStatisticsInfo) Alias() string { return u.umsMemberStatisticsInfoDo.Alias() }

func (u umsMemberStatisticsInfo) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberStatisticsInfoDo.Columns(cols...)
}

func (u *umsMemberStatisticsInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberStatisticsInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 16)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["consume_amount"] = u.ConsumeAmount
	u.fieldMap["order_count"] = u.OrderCount
	u.fieldMap["coupon_count"] = u.CouponCount
	u.fieldMap["comment_count"] = u.CommentCount
	u.fieldMap["return_order_count"] = u.ReturnOrderCount
	u.fieldMap["login_count"] = u.LoginCount
	u.fieldMap["attend_count"] = u.AttendCount
	u.fieldMap["fans_count"] = u.FansCount
	u.fieldMap["collect_product_count"] = u.CollectProductCount
	u.fieldMap["collect_subject_count"] = u.CollectSubjectCount
	u.fieldMap["collect_topic_count"] = u.CollectTopicCount
	u.fieldMap["collect_comment_count"] = u.CollectCommentCount
	u.fieldMap["invite_friend_count"] = u.InviteFriendCount
	u.fieldMap["recent_order_time"] = u.RecentOrderTime
}

func (u umsMemberStatisticsInfo) clone(db *gorm.DB) umsMemberStatisticsInfo {
	u.umsMemberStatisticsInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberStatisticsInfo) replaceDB(db *gorm.DB) umsMemberStatisticsInfo {
	u.umsMemberStatisticsInfoDo.ReplaceDB(db)
	return u
}

type umsMemberStatisticsInfoDo struct{ gen.DO }

type IUmsMemberStatisticsInfoDo interface {
	gen.SubQuery
	Debug() IUmsMemberStatisticsInfoDo
	WithContext(ctx context.Context) IUmsMemberStatisticsInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberStatisticsInfoDo
	WriteDB() IUmsMemberStatisticsInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberStatisticsInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberStatisticsInfoDo
	Not(conds ...gen.Condition) IUmsMemberStatisticsInfoDo
	Or(conds ...gen.Condition) IUmsMemberStatisticsInfoDo
	Select(conds ...field.Expr) IUmsMemberStatisticsInfoDo
	Where(conds ...gen.Condition) IUmsMemberStatisticsInfoDo
	Order(conds ...field.Expr) IUmsMemberStatisticsInfoDo
	Distinct(cols ...field.Expr) IUmsMemberStatisticsInfoDo
	Omit(cols ...field.Expr) IUmsMemberStatisticsInfoDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo
	Group(cols ...field.Expr) IUmsMemberStatisticsInfoDo
	Having(conds ...gen.Condition) IUmsMemberStatisticsInfoDo
	Limit(limit int) IUmsMemberStatisticsInfoDo
	Offset(offset int) IUmsMemberStatisticsInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberStatisticsInfoDo
	Unscoped() IUmsMemberStatisticsInfoDo
	Create(values ...*model.UmsMemberStatisticsInfo) error
	CreateInBatches(values []*model.UmsMemberStatisticsInfo, batchSize int) error
	Save(values ...*model.UmsMemberStatisticsInfo) error
	First() (*model.UmsMemberStatisticsInfo, error)
	Take() (*model.UmsMemberStatisticsInfo, error)
	Last() (*model.UmsMemberStatisticsInfo, error)
	Find() ([]*model.UmsMemberStatisticsInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberStatisticsInfo, err error)
	FindInBatches(result *[]*model.UmsMemberStatisticsInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberStatisticsInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberStatisticsInfoDo
	Assign(attrs ...field.AssignExpr) IUmsMemberStatisticsInfoDo
	Joins(fields ...field.RelationField) IUmsMemberStatisticsInfoDo
	Preload(fields ...field.RelationField) IUmsMemberStatisticsInfoDo
	FirstOrInit() (*model.UmsMemberStatisticsInfo, error)
	FirstOrCreate() (*model.UmsMemberStatisticsInfo, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberStatisticsInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberStatisticsInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberStatisticsInfoDo) Debug() IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberStatisticsInfoDo) WithContext(ctx context.Context) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberStatisticsInfoDo) ReadDB() IUmsMemberStatisticsInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberStatisticsInfoDo) WriteDB() IUmsMemberStatisticsInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberStatisticsInfoDo) Session(config *gorm.Session) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberStatisticsInfoDo) Clauses(conds ...clause.Expression) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberStatisticsInfoDo) Returning(value interface{}, columns ...string) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberStatisticsInfoDo) Not(conds ...gen.Condition) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberStatisticsInfoDo) Or(conds ...gen.Condition) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberStatisticsInfoDo) Select(conds ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberStatisticsInfoDo) Where(conds ...gen.Condition) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberStatisticsInfoDo) Order(conds ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberStatisticsInfoDo) Distinct(cols ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberStatisticsInfoDo) Omit(cols ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberStatisticsInfoDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberStatisticsInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberStatisticsInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberStatisticsInfoDo) Group(cols ...field.Expr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberStatisticsInfoDo) Having(conds ...gen.Condition) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberStatisticsInfoDo) Limit(limit int) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberStatisticsInfoDo) Offset(offset int) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberStatisticsInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberStatisticsInfoDo) Unscoped() IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberStatisticsInfoDo) Create(values ...*model.UmsMemberStatisticsInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberStatisticsInfoDo) CreateInBatches(values []*model.UmsMemberStatisticsInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberStatisticsInfoDo) Save(values ...*model.UmsMemberStatisticsInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberStatisticsInfoDo) First() (*model.UmsMemberStatisticsInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStatisticsInfo), nil
	}
}

func (u umsMemberStatisticsInfoDo) Take() (*model.UmsMemberStatisticsInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStatisticsInfo), nil
	}
}

func (u umsMemberStatisticsInfoDo) Last() (*model.UmsMemberStatisticsInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStatisticsInfo), nil
	}
}

func (u umsMemberStatisticsInfoDo) Find() ([]*model.UmsMemberStatisticsInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberStatisticsInfo), err
}

func (u umsMemberStatisticsInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberStatisticsInfo, err error) {
	buf := make([]*model.UmsMemberStatisticsInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberStatisticsInfoDo) FindInBatches(result *[]*model.UmsMemberStatisticsInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberStatisticsInfoDo) Attrs(attrs ...field.AssignExpr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberStatisticsInfoDo) Assign(attrs ...field.AssignExpr) IUmsMemberStatisticsInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberStatisticsInfoDo) Joins(fields ...field.RelationField) IUmsMemberStatisticsInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberStatisticsInfoDo) Preload(fields ...field.RelationField) IUmsMemberStatisticsInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberStatisticsInfoDo) FirstOrInit() (*model.UmsMemberStatisticsInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStatisticsInfo), nil
	}
}

func (u umsMemberStatisticsInfoDo) FirstOrCreate() (*model.UmsMemberStatisticsInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberStatisticsInfo), nil
	}
}

func (u umsMemberStatisticsInfoDo) FindByPage(offset int, limit int) (result []*model.UmsMemberStatisticsInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberStatisticsInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberStatisticsInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberStatisticsInfoDo) Delete(models ...*model.UmsMemberStatisticsInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberStatisticsInfoDo) withDO(do gen.Dao) *umsMemberStatisticsInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
