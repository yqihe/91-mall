// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsRoleResourceRelation(db *gorm.DB, opts ...gen.DOOption) umsRoleResourceRelation {
	_umsRoleResourceRelation := umsRoleResourceRelation{}

	_umsRoleResourceRelation.umsRoleResourceRelationDo.UseDB(db, opts...)
	_umsRoleResourceRelation.umsRoleResourceRelationDo.UseModel(&model.UmsRoleResourceRelation{})

	tableName := _umsRoleResourceRelation.umsRoleResourceRelationDo.TableName()
	_umsRoleResourceRelation.ALL = field.NewAsterisk(tableName)
	_umsRoleResourceRelation.ID = field.NewInt64(tableName, "id")
	_umsRoleResourceRelation.RoleID = field.NewInt64(tableName, "role_id")
	_umsRoleResourceRelation.ResourceID = field.NewInt64(tableName, "resource_id")

	_umsRoleResourceRelation.fillFieldMap()

	return _umsRoleResourceRelation
}

// umsRoleResourceRelation 后台角色资源关系表
type umsRoleResourceRelation struct {
	umsRoleResourceRelationDo umsRoleResourceRelationDo

	ALL        field.Asterisk
	ID         field.Int64
	RoleID     field.Int64 // 角色ID
	ResourceID field.Int64 // 资源ID

	fieldMap map[string]field.Expr
}

func (u umsRoleResourceRelation) Table(newTableName string) *umsRoleResourceRelation {
	u.umsRoleResourceRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRoleResourceRelation) As(alias string) *umsRoleResourceRelation {
	u.umsRoleResourceRelationDo.DO = *(u.umsRoleResourceRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRoleResourceRelation) updateTableName(table string) *umsRoleResourceRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.RoleID = field.NewInt64(table, "role_id")
	u.ResourceID = field.NewInt64(table, "resource_id")

	u.fillFieldMap()

	return u
}

func (u *umsRoleResourceRelation) WithContext(ctx context.Context) IUmsRoleResourceRelationDo {
	return u.umsRoleResourceRelationDo.WithContext(ctx)
}

func (u umsRoleResourceRelation) TableName() string { return u.umsRoleResourceRelationDo.TableName() }

func (u umsRoleResourceRelation) Alias() string { return u.umsRoleResourceRelationDo.Alias() }

func (u umsRoleResourceRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsRoleResourceRelationDo.Columns(cols...)
}

func (u *umsRoleResourceRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRoleResourceRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["resource_id"] = u.ResourceID
}

func (u umsRoleResourceRelation) clone(db *gorm.DB) umsRoleResourceRelation {
	u.umsRoleResourceRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsRoleResourceRelation) replaceDB(db *gorm.DB) umsRoleResourceRelation {
	u.umsRoleResourceRelationDo.ReplaceDB(db)
	return u
}

type umsRoleResourceRelationDo struct{ gen.DO }

type IUmsRoleResourceRelationDo interface {
	gen.SubQuery
	Debug() IUmsRoleResourceRelationDo
	WithContext(ctx context.Context) IUmsRoleResourceRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsRoleResourceRelationDo
	WriteDB() IUmsRoleResourceRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsRoleResourceRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsRoleResourceRelationDo
	Not(conds ...gen.Condition) IUmsRoleResourceRelationDo
	Or(conds ...gen.Condition) IUmsRoleResourceRelationDo
	Select(conds ...field.Expr) IUmsRoleResourceRelationDo
	Where(conds ...gen.Condition) IUmsRoleResourceRelationDo
	Order(conds ...field.Expr) IUmsRoleResourceRelationDo
	Distinct(cols ...field.Expr) IUmsRoleResourceRelationDo
	Omit(cols ...field.Expr) IUmsRoleResourceRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo
	Group(cols ...field.Expr) IUmsRoleResourceRelationDo
	Having(conds ...gen.Condition) IUmsRoleResourceRelationDo
	Limit(limit int) IUmsRoleResourceRelationDo
	Offset(offset int) IUmsRoleResourceRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleResourceRelationDo
	Unscoped() IUmsRoleResourceRelationDo
	Create(values ...*model.UmsRoleResourceRelation) error
	CreateInBatches(values []*model.UmsRoleResourceRelation, batchSize int) error
	Save(values ...*model.UmsRoleResourceRelation) error
	First() (*model.UmsRoleResourceRelation, error)
	Take() (*model.UmsRoleResourceRelation, error)
	Last() (*model.UmsRoleResourceRelation, error)
	Find() ([]*model.UmsRoleResourceRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRoleResourceRelation, err error)
	FindInBatches(result *[]*model.UmsRoleResourceRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsRoleResourceRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsRoleResourceRelationDo
	Assign(attrs ...field.AssignExpr) IUmsRoleResourceRelationDo
	Joins(fields ...field.RelationField) IUmsRoleResourceRelationDo
	Preload(fields ...field.RelationField) IUmsRoleResourceRelationDo
	FirstOrInit() (*model.UmsRoleResourceRelation, error)
	FirstOrCreate() (*model.UmsRoleResourceRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsRoleResourceRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsRoleResourceRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsRoleResourceRelationDo) Debug() IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRoleResourceRelationDo) WithContext(ctx context.Context) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRoleResourceRelationDo) ReadDB() IUmsRoleResourceRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRoleResourceRelationDo) WriteDB() IUmsRoleResourceRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRoleResourceRelationDo) Session(config *gorm.Session) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsRoleResourceRelationDo) Clauses(conds ...clause.Expression) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRoleResourceRelationDo) Returning(value interface{}, columns ...string) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRoleResourceRelationDo) Not(conds ...gen.Condition) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRoleResourceRelationDo) Or(conds ...gen.Condition) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRoleResourceRelationDo) Select(conds ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRoleResourceRelationDo) Where(conds ...gen.Condition) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRoleResourceRelationDo) Order(conds ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRoleResourceRelationDo) Distinct(cols ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRoleResourceRelationDo) Omit(cols ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRoleResourceRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRoleResourceRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRoleResourceRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRoleResourceRelationDo) Group(cols ...field.Expr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRoleResourceRelationDo) Having(conds ...gen.Condition) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRoleResourceRelationDo) Limit(limit int) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRoleResourceRelationDo) Offset(offset int) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRoleResourceRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRoleResourceRelationDo) Unscoped() IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRoleResourceRelationDo) Create(values ...*model.UmsRoleResourceRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRoleResourceRelationDo) CreateInBatches(values []*model.UmsRoleResourceRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRoleResourceRelationDo) Save(values ...*model.UmsRoleResourceRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRoleResourceRelationDo) First() (*model.UmsRoleResourceRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleResourceRelation), nil
	}
}

func (u umsRoleResourceRelationDo) Take() (*model.UmsRoleResourceRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleResourceRelation), nil
	}
}

func (u umsRoleResourceRelationDo) Last() (*model.UmsRoleResourceRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleResourceRelation), nil
	}
}

func (u umsRoleResourceRelationDo) Find() ([]*model.UmsRoleResourceRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRoleResourceRelation), err
}

func (u umsRoleResourceRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRoleResourceRelation, err error) {
	buf := make([]*model.UmsRoleResourceRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRoleResourceRelationDo) FindInBatches(result *[]*model.UmsRoleResourceRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRoleResourceRelationDo) Attrs(attrs ...field.AssignExpr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRoleResourceRelationDo) Assign(attrs ...field.AssignExpr) IUmsRoleResourceRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRoleResourceRelationDo) Joins(fields ...field.RelationField) IUmsRoleResourceRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRoleResourceRelationDo) Preload(fields ...field.RelationField) IUmsRoleResourceRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRoleResourceRelationDo) FirstOrInit() (*model.UmsRoleResourceRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleResourceRelation), nil
	}
}

func (u umsRoleResourceRelationDo) FirstOrCreate() (*model.UmsRoleResourceRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleResourceRelation), nil
	}
}

func (u umsRoleResourceRelationDo) FindByPage(offset int, limit int) (result []*model.UmsRoleResourceRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRoleResourceRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRoleResourceRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRoleResourceRelationDo) Delete(models ...*model.UmsRoleResourceRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRoleResourceRelationDo) withDO(do gen.Dao) *umsRoleResourceRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
