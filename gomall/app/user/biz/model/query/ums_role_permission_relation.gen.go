// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsRolePermissionRelation(db *gorm.DB, opts ...gen.DOOption) umsRolePermissionRelation {
	_umsRolePermissionRelation := umsRolePermissionRelation{}

	_umsRolePermissionRelation.umsRolePermissionRelationDo.UseDB(db, opts...)
	_umsRolePermissionRelation.umsRolePermissionRelationDo.UseModel(&model.UmsRolePermissionRelation{})

	tableName := _umsRolePermissionRelation.umsRolePermissionRelationDo.TableName()
	_umsRolePermissionRelation.ALL = field.NewAsterisk(tableName)
	_umsRolePermissionRelation.ID = field.NewInt64(tableName, "id")
	_umsRolePermissionRelation.RoleID = field.NewInt64(tableName, "role_id")
	_umsRolePermissionRelation.PermissionID = field.NewInt64(tableName, "permission_id")

	_umsRolePermissionRelation.fillFieldMap()

	return _umsRolePermissionRelation
}

// umsRolePermissionRelation 后台用户角色和权限关系表
type umsRolePermissionRelation struct {
	umsRolePermissionRelationDo

	ALL          field.Asterisk
	ID           field.Int64
	RoleID       field.Int64
	PermissionID field.Int64

	fieldMap map[string]field.Expr
}

func (u umsRolePermissionRelation) Table(newTableName string) *umsRolePermissionRelation {
	u.umsRolePermissionRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRolePermissionRelation) As(alias string) *umsRolePermissionRelation {
	u.umsRolePermissionRelationDo.DO = *(u.umsRolePermissionRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRolePermissionRelation) updateTableName(table string) *umsRolePermissionRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.RoleID = field.NewInt64(table, "role_id")
	u.PermissionID = field.NewInt64(table, "permission_id")

	u.fillFieldMap()

	return u
}

func (u *umsRolePermissionRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRolePermissionRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["permission_id"] = u.PermissionID
}

func (u umsRolePermissionRelation) clone(db *gorm.DB) umsRolePermissionRelation {
	u.umsRolePermissionRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsRolePermissionRelation) replaceDB(db *gorm.DB) umsRolePermissionRelation {
	u.umsRolePermissionRelationDo.ReplaceDB(db)
	return u
}

type umsRolePermissionRelationDo struct{ gen.DO }

type IUmsRolePermissionRelationDo interface {
	gen.SubQuery
	Debug() IUmsRolePermissionRelationDo
	WithContext(ctx context.Context) IUmsRolePermissionRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsRolePermissionRelationDo
	WriteDB() IUmsRolePermissionRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsRolePermissionRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsRolePermissionRelationDo
	Not(conds ...gen.Condition) IUmsRolePermissionRelationDo
	Or(conds ...gen.Condition) IUmsRolePermissionRelationDo
	Select(conds ...field.Expr) IUmsRolePermissionRelationDo
	Where(conds ...gen.Condition) IUmsRolePermissionRelationDo
	Order(conds ...field.Expr) IUmsRolePermissionRelationDo
	Distinct(cols ...field.Expr) IUmsRolePermissionRelationDo
	Omit(cols ...field.Expr) IUmsRolePermissionRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo
	Group(cols ...field.Expr) IUmsRolePermissionRelationDo
	Having(conds ...gen.Condition) IUmsRolePermissionRelationDo
	Limit(limit int) IUmsRolePermissionRelationDo
	Offset(offset int) IUmsRolePermissionRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRolePermissionRelationDo
	Unscoped() IUmsRolePermissionRelationDo
	Create(values ...*model.UmsRolePermissionRelation) error
	CreateInBatches(values []*model.UmsRolePermissionRelation, batchSize int) error
	Save(values ...*model.UmsRolePermissionRelation) error
	First() (*model.UmsRolePermissionRelation, error)
	Take() (*model.UmsRolePermissionRelation, error)
	Last() (*model.UmsRolePermissionRelation, error)
	Find() ([]*model.UmsRolePermissionRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRolePermissionRelation, err error)
	FindInBatches(result *[]*model.UmsRolePermissionRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsRolePermissionRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsRolePermissionRelationDo
	Assign(attrs ...field.AssignExpr) IUmsRolePermissionRelationDo
	Joins(fields ...field.RelationField) IUmsRolePermissionRelationDo
	Preload(fields ...field.RelationField) IUmsRolePermissionRelationDo
	FirstOrInit() (*model.UmsRolePermissionRelation, error)
	FirstOrCreate() (*model.UmsRolePermissionRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsRolePermissionRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsRolePermissionRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsRolePermissionRelationDo) Debug() IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRolePermissionRelationDo) WithContext(ctx context.Context) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRolePermissionRelationDo) ReadDB() IUmsRolePermissionRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRolePermissionRelationDo) WriteDB() IUmsRolePermissionRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRolePermissionRelationDo) Session(config *gorm.Session) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsRolePermissionRelationDo) Clauses(conds ...clause.Expression) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRolePermissionRelationDo) Returning(value interface{}, columns ...string) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRolePermissionRelationDo) Not(conds ...gen.Condition) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRolePermissionRelationDo) Or(conds ...gen.Condition) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRolePermissionRelationDo) Select(conds ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRolePermissionRelationDo) Where(conds ...gen.Condition) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRolePermissionRelationDo) Order(conds ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRolePermissionRelationDo) Distinct(cols ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRolePermissionRelationDo) Omit(cols ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRolePermissionRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRolePermissionRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRolePermissionRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRolePermissionRelationDo) Group(cols ...field.Expr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRolePermissionRelationDo) Having(conds ...gen.Condition) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRolePermissionRelationDo) Limit(limit int) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRolePermissionRelationDo) Offset(offset int) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRolePermissionRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRolePermissionRelationDo) Unscoped() IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRolePermissionRelationDo) Create(values ...*model.UmsRolePermissionRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRolePermissionRelationDo) CreateInBatches(values []*model.UmsRolePermissionRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRolePermissionRelationDo) Save(values ...*model.UmsRolePermissionRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRolePermissionRelationDo) First() (*model.UmsRolePermissionRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRolePermissionRelation), nil
	}
}

func (u umsRolePermissionRelationDo) Take() (*model.UmsRolePermissionRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRolePermissionRelation), nil
	}
}

func (u umsRolePermissionRelationDo) Last() (*model.UmsRolePermissionRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRolePermissionRelation), nil
	}
}

func (u umsRolePermissionRelationDo) Find() ([]*model.UmsRolePermissionRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRolePermissionRelation), err
}

func (u umsRolePermissionRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRolePermissionRelation, err error) {
	buf := make([]*model.UmsRolePermissionRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRolePermissionRelationDo) FindInBatches(result *[]*model.UmsRolePermissionRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRolePermissionRelationDo) Attrs(attrs ...field.AssignExpr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRolePermissionRelationDo) Assign(attrs ...field.AssignExpr) IUmsRolePermissionRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRolePermissionRelationDo) Joins(fields ...field.RelationField) IUmsRolePermissionRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRolePermissionRelationDo) Preload(fields ...field.RelationField) IUmsRolePermissionRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRolePermissionRelationDo) FirstOrInit() (*model.UmsRolePermissionRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRolePermissionRelation), nil
	}
}

func (u umsRolePermissionRelationDo) FirstOrCreate() (*model.UmsRolePermissionRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRolePermissionRelation), nil
	}
}

func (u umsRolePermissionRelationDo) FindByPage(offset int, limit int) (result []*model.UmsRolePermissionRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRolePermissionRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRolePermissionRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRolePermissionRelationDo) Delete(models ...*model.UmsRolePermissionRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRolePermissionRelationDo) withDO(do gen.Dao) *umsRolePermissionRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
