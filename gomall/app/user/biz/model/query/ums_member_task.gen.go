// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsMemberTask(db *gorm.DB, opts ...gen.DOOption) umsMemberTask {
	_umsMemberTask := umsMemberTask{}

	_umsMemberTask.umsMemberTaskDo.UseDB(db, opts...)
	_umsMemberTask.umsMemberTaskDo.UseModel(&model.UmsMemberTask{})

	tableName := _umsMemberTask.umsMemberTaskDo.TableName()
	_umsMemberTask.ALL = field.NewAsterisk(tableName)
	_umsMemberTask.ID = field.NewInt64(tableName, "id")
	_umsMemberTask.Name = field.NewString(tableName, "name")
	_umsMemberTask.Growth = field.NewInt32(tableName, "growth")
	_umsMemberTask.Intergration = field.NewInt32(tableName, "intergration")
	_umsMemberTask.Type = field.NewInt32(tableName, "type")

	_umsMemberTask.fillFieldMap()

	return _umsMemberTask
}

// umsMemberTask 会员任务表
type umsMemberTask struct {
	umsMemberTaskDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String
	Growth       field.Int32 // 赠送成长值
	Intergration field.Int32 // 赠送积分
	Type         field.Int32 // 任务类型：0->新手任务；1->日常任务

	fieldMap map[string]field.Expr
}

func (u umsMemberTask) Table(newTableName string) *umsMemberTask {
	u.umsMemberTaskDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberTask) As(alias string) *umsMemberTask {
	u.umsMemberTaskDo.DO = *(u.umsMemberTaskDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberTask) updateTableName(table string) *umsMemberTask {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Growth = field.NewInt32(table, "growth")
	u.Intergration = field.NewInt32(table, "intergration")
	u.Type = field.NewInt32(table, "type")

	u.fillFieldMap()

	return u
}

func (u *umsMemberTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberTask) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["growth"] = u.Growth
	u.fieldMap["intergration"] = u.Intergration
	u.fieldMap["type"] = u.Type
}

func (u umsMemberTask) clone(db *gorm.DB) umsMemberTask {
	u.umsMemberTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberTask) replaceDB(db *gorm.DB) umsMemberTask {
	u.umsMemberTaskDo.ReplaceDB(db)
	return u
}

type umsMemberTaskDo struct{ gen.DO }

type IUmsMemberTaskDo interface {
	gen.SubQuery
	Debug() IUmsMemberTaskDo
	WithContext(ctx context.Context) IUmsMemberTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberTaskDo
	WriteDB() IUmsMemberTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberTaskDo
	Not(conds ...gen.Condition) IUmsMemberTaskDo
	Or(conds ...gen.Condition) IUmsMemberTaskDo
	Select(conds ...field.Expr) IUmsMemberTaskDo
	Where(conds ...gen.Condition) IUmsMemberTaskDo
	Order(conds ...field.Expr) IUmsMemberTaskDo
	Distinct(cols ...field.Expr) IUmsMemberTaskDo
	Omit(cols ...field.Expr) IUmsMemberTaskDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo
	Group(cols ...field.Expr) IUmsMemberTaskDo
	Having(conds ...gen.Condition) IUmsMemberTaskDo
	Limit(limit int) IUmsMemberTaskDo
	Offset(offset int) IUmsMemberTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTaskDo
	Unscoped() IUmsMemberTaskDo
	Create(values ...*model.UmsMemberTask) error
	CreateInBatches(values []*model.UmsMemberTask, batchSize int) error
	Save(values ...*model.UmsMemberTask) error
	First() (*model.UmsMemberTask, error)
	Take() (*model.UmsMemberTask, error)
	Last() (*model.UmsMemberTask, error)
	Find() ([]*model.UmsMemberTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTask, err error)
	FindInBatches(result *[]*model.UmsMemberTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberTaskDo
	Assign(attrs ...field.AssignExpr) IUmsMemberTaskDo
	Joins(fields ...field.RelationField) IUmsMemberTaskDo
	Preload(fields ...field.RelationField) IUmsMemberTaskDo
	FirstOrInit() (*model.UmsMemberTask, error)
	FirstOrCreate() (*model.UmsMemberTask, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberTaskDo) Debug() IUmsMemberTaskDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberTaskDo) WithContext(ctx context.Context) IUmsMemberTaskDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberTaskDo) ReadDB() IUmsMemberTaskDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberTaskDo) WriteDB() IUmsMemberTaskDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberTaskDo) Session(config *gorm.Session) IUmsMemberTaskDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberTaskDo) Clauses(conds ...clause.Expression) IUmsMemberTaskDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberTaskDo) Returning(value interface{}, columns ...string) IUmsMemberTaskDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberTaskDo) Not(conds ...gen.Condition) IUmsMemberTaskDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberTaskDo) Or(conds ...gen.Condition) IUmsMemberTaskDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberTaskDo) Select(conds ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberTaskDo) Where(conds ...gen.Condition) IUmsMemberTaskDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberTaskDo) Order(conds ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberTaskDo) Distinct(cols ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberTaskDo) Omit(cols ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberTaskDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberTaskDo) Group(cols ...field.Expr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberTaskDo) Having(conds ...gen.Condition) IUmsMemberTaskDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberTaskDo) Limit(limit int) IUmsMemberTaskDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberTaskDo) Offset(offset int) IUmsMemberTaskDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTaskDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberTaskDo) Unscoped() IUmsMemberTaskDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberTaskDo) Create(values ...*model.UmsMemberTask) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberTaskDo) CreateInBatches(values []*model.UmsMemberTask, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberTaskDo) Save(values ...*model.UmsMemberTask) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberTaskDo) First() (*model.UmsMemberTask, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTask), nil
	}
}

func (u umsMemberTaskDo) Take() (*model.UmsMemberTask, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTask), nil
	}
}

func (u umsMemberTaskDo) Last() (*model.UmsMemberTask, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTask), nil
	}
}

func (u umsMemberTaskDo) Find() ([]*model.UmsMemberTask, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberTask), err
}

func (u umsMemberTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTask, err error) {
	buf := make([]*model.UmsMemberTask, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberTaskDo) FindInBatches(result *[]*model.UmsMemberTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberTaskDo) Attrs(attrs ...field.AssignExpr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberTaskDo) Assign(attrs ...field.AssignExpr) IUmsMemberTaskDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberTaskDo) Joins(fields ...field.RelationField) IUmsMemberTaskDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberTaskDo) Preload(fields ...field.RelationField) IUmsMemberTaskDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberTaskDo) FirstOrInit() (*model.UmsMemberTask, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTask), nil
	}
}

func (u umsMemberTaskDo) FirstOrCreate() (*model.UmsMemberTask, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTask), nil
	}
}

func (u umsMemberTaskDo) FindByPage(offset int, limit int) (result []*model.UmsMemberTask, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberTaskDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberTaskDo) Delete(models ...*model.UmsMemberTask) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberTaskDo) withDO(do gen.Dao) *umsMemberTaskDo {
	u.DO = *do.(*gen.DO)
	return u
}
