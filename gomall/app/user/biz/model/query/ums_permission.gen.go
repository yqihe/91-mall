// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsPermission(db *gorm.DB, opts ...gen.DOOption) umsPermission {
	_umsPermission := umsPermission{}

	_umsPermission.umsPermissionDo.UseDB(db, opts...)
	_umsPermission.umsPermissionDo.UseModel(&model.UmsPermission{})

	tableName := _umsPermission.umsPermissionDo.TableName()
	_umsPermission.ALL = field.NewAsterisk(tableName)
	_umsPermission.ID = field.NewInt64(tableName, "id")
	_umsPermission.Pid = field.NewInt64(tableName, "pid")
	_umsPermission.Name = field.NewString(tableName, "name")
	_umsPermission.Value = field.NewString(tableName, "value")
	_umsPermission.Icon = field.NewString(tableName, "icon")
	_umsPermission.Type = field.NewInt32(tableName, "type")
	_umsPermission.URI = field.NewString(tableName, "uri")
	_umsPermission.Status = field.NewInt32(tableName, "status")
	_umsPermission.CreateTime = field.NewTime(tableName, "create_time")
	_umsPermission.Sort = field.NewInt32(tableName, "sort")

	_umsPermission.fillFieldMap()

	return _umsPermission
}

// umsPermission 后台用户权限表
type umsPermission struct {
	umsPermissionDo

	ALL        field.Asterisk
	ID         field.Int64
	Pid        field.Int64  // 父级权限id
	Name       field.String // 名称
	Value      field.String // 权限值
	Icon       field.String // 图标
	Type       field.Int32  // 权限类型：0->目录；1->菜单；2->按钮（接口绑定权限）
	URI        field.String // 前端资源路径
	Status     field.Int32  // 启用状态；0->禁用；1->启用
	CreateTime field.Time   // 创建时间
	Sort       field.Int32  // 排序

	fieldMap map[string]field.Expr
}

func (u umsPermission) Table(newTableName string) *umsPermission {
	u.umsPermissionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsPermission) As(alias string) *umsPermission {
	u.umsPermissionDo.DO = *(u.umsPermissionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsPermission) updateTableName(table string) *umsPermission {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Pid = field.NewInt64(table, "pid")
	u.Name = field.NewString(table, "name")
	u.Value = field.NewString(table, "value")
	u.Icon = field.NewString(table, "icon")
	u.Type = field.NewInt32(table, "type")
	u.URI = field.NewString(table, "uri")
	u.Status = field.NewInt32(table, "status")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Sort = field.NewInt32(table, "sort")

	u.fillFieldMap()

	return u
}

func (u *umsPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsPermission) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["pid"] = u.Pid
	u.fieldMap["name"] = u.Name
	u.fieldMap["value"] = u.Value
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["type"] = u.Type
	u.fieldMap["uri"] = u.URI
	u.fieldMap["status"] = u.Status
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["sort"] = u.Sort
}

func (u umsPermission) clone(db *gorm.DB) umsPermission {
	u.umsPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsPermission) replaceDB(db *gorm.DB) umsPermission {
	u.umsPermissionDo.ReplaceDB(db)
	return u
}

type umsPermissionDo struct{ gen.DO }

type IUmsPermissionDo interface {
	gen.SubQuery
	Debug() IUmsPermissionDo
	WithContext(ctx context.Context) IUmsPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsPermissionDo
	WriteDB() IUmsPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsPermissionDo
	Not(conds ...gen.Condition) IUmsPermissionDo
	Or(conds ...gen.Condition) IUmsPermissionDo
	Select(conds ...field.Expr) IUmsPermissionDo
	Where(conds ...gen.Condition) IUmsPermissionDo
	Order(conds ...field.Expr) IUmsPermissionDo
	Distinct(cols ...field.Expr) IUmsPermissionDo
	Omit(cols ...field.Expr) IUmsPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IUmsPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsPermissionDo
	Group(cols ...field.Expr) IUmsPermissionDo
	Having(conds ...gen.Condition) IUmsPermissionDo
	Limit(limit int) IUmsPermissionDo
	Offset(offset int) IUmsPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsPermissionDo
	Unscoped() IUmsPermissionDo
	Create(values ...*model.UmsPermission) error
	CreateInBatches(values []*model.UmsPermission, batchSize int) error
	Save(values ...*model.UmsPermission) error
	First() (*model.UmsPermission, error)
	Take() (*model.UmsPermission, error)
	Last() (*model.UmsPermission, error)
	Find() ([]*model.UmsPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsPermission, err error)
	FindInBatches(result *[]*model.UmsPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsPermissionDo
	Assign(attrs ...field.AssignExpr) IUmsPermissionDo
	Joins(fields ...field.RelationField) IUmsPermissionDo
	Preload(fields ...field.RelationField) IUmsPermissionDo
	FirstOrInit() (*model.UmsPermission, error)
	FirstOrCreate() (*model.UmsPermission, error)
	FindByPage(offset int, limit int) (result []*model.UmsPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsPermissionDo) Debug() IUmsPermissionDo {
	return u.withDO(u.DO.Debug())
}

func (u umsPermissionDo) WithContext(ctx context.Context) IUmsPermissionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsPermissionDo) ReadDB() IUmsPermissionDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsPermissionDo) WriteDB() IUmsPermissionDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsPermissionDo) Session(config *gorm.Session) IUmsPermissionDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsPermissionDo) Clauses(conds ...clause.Expression) IUmsPermissionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsPermissionDo) Returning(value interface{}, columns ...string) IUmsPermissionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsPermissionDo) Not(conds ...gen.Condition) IUmsPermissionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsPermissionDo) Or(conds ...gen.Condition) IUmsPermissionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsPermissionDo) Select(conds ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsPermissionDo) Where(conds ...gen.Condition) IUmsPermissionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsPermissionDo) Order(conds ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsPermissionDo) Distinct(cols ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsPermissionDo) Omit(cols ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsPermissionDo) Join(table schema.Tabler, on ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsPermissionDo) Group(cols ...field.Expr) IUmsPermissionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsPermissionDo) Having(conds ...gen.Condition) IUmsPermissionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsPermissionDo) Limit(limit int) IUmsPermissionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsPermissionDo) Offset(offset int) IUmsPermissionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsPermissionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsPermissionDo) Unscoped() IUmsPermissionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsPermissionDo) Create(values ...*model.UmsPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsPermissionDo) CreateInBatches(values []*model.UmsPermission, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsPermissionDo) Save(values ...*model.UmsPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsPermissionDo) First() (*model.UmsPermission, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsPermission), nil
	}
}

func (u umsPermissionDo) Take() (*model.UmsPermission, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsPermission), nil
	}
}

func (u umsPermissionDo) Last() (*model.UmsPermission, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsPermission), nil
	}
}

func (u umsPermissionDo) Find() ([]*model.UmsPermission, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsPermission), err
}

func (u umsPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsPermission, err error) {
	buf := make([]*model.UmsPermission, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsPermissionDo) FindInBatches(result *[]*model.UmsPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsPermissionDo) Attrs(attrs ...field.AssignExpr) IUmsPermissionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsPermissionDo) Assign(attrs ...field.AssignExpr) IUmsPermissionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsPermissionDo) Joins(fields ...field.RelationField) IUmsPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsPermissionDo) Preload(fields ...field.RelationField) IUmsPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsPermissionDo) FirstOrInit() (*model.UmsPermission, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsPermission), nil
	}
}

func (u umsPermissionDo) FirstOrCreate() (*model.UmsPermission, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsPermission), nil
	}
}

func (u umsPermissionDo) FindByPage(offset int, limit int) (result []*model.UmsPermission, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsPermissionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsPermissionDo) Delete(models ...*model.UmsPermission) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsPermissionDo) withDO(do gen.Dao) *umsPermissionDo {
	u.DO = *do.(*gen.DO)
	return u
}
