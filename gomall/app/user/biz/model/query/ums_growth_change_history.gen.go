// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsGrowthChangeHistory(db *gorm.DB, opts ...gen.DOOption) umsGrowthChangeHistory {
	_umsGrowthChangeHistory := umsGrowthChangeHistory{}

	_umsGrowthChangeHistory.umsGrowthChangeHistoryDo.UseDB(db, opts...)
	_umsGrowthChangeHistory.umsGrowthChangeHistoryDo.UseModel(&model.UmsGrowthChangeHistory{})

	tableName := _umsGrowthChangeHistory.umsGrowthChangeHistoryDo.TableName()
	_umsGrowthChangeHistory.ALL = field.NewAsterisk(tableName)
	_umsGrowthChangeHistory.ID = field.NewInt64(tableName, "id")
	_umsGrowthChangeHistory.MemberID = field.NewInt64(tableName, "member_id")
	_umsGrowthChangeHistory.CreateTime = field.NewTime(tableName, "create_time")
	_umsGrowthChangeHistory.ChangeType = field.NewInt32(tableName, "change_type")
	_umsGrowthChangeHistory.ChangeCount = field.NewInt32(tableName, "change_count")
	_umsGrowthChangeHistory.OperateMan = field.NewString(tableName, "operate_man")
	_umsGrowthChangeHistory.OperateNote = field.NewString(tableName, "operate_note")
	_umsGrowthChangeHistory.SourceType = field.NewInt32(tableName, "source_type")

	_umsGrowthChangeHistory.fillFieldMap()

	return _umsGrowthChangeHistory
}

// umsGrowthChangeHistory 成长值变化历史记录表
type umsGrowthChangeHistory struct {
	umsGrowthChangeHistoryDo umsGrowthChangeHistoryDo

	ALL         field.Asterisk
	ID          field.Int64
	MemberID    field.Int64
	CreateTime  field.Time
	ChangeType  field.Int32  // 改变类型：0->增加；1->减少
	ChangeCount field.Int32  // 积分改变数量
	OperateMan  field.String // 操作人员
	OperateNote field.String // 操作备注
	SourceType  field.Int32  // 积分来源：0->购物；1->管理员修改

	fieldMap map[string]field.Expr
}

func (u umsGrowthChangeHistory) Table(newTableName string) *umsGrowthChangeHistory {
	u.umsGrowthChangeHistoryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsGrowthChangeHistory) As(alias string) *umsGrowthChangeHistory {
	u.umsGrowthChangeHistoryDo.DO = *(u.umsGrowthChangeHistoryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsGrowthChangeHistory) updateTableName(table string) *umsGrowthChangeHistory {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ChangeType = field.NewInt32(table, "change_type")
	u.ChangeCount = field.NewInt32(table, "change_count")
	u.OperateMan = field.NewString(table, "operate_man")
	u.OperateNote = field.NewString(table, "operate_note")
	u.SourceType = field.NewInt32(table, "source_type")

	u.fillFieldMap()

	return u
}

func (u *umsGrowthChangeHistory) WithContext(ctx context.Context) IUmsGrowthChangeHistoryDo {
	return u.umsGrowthChangeHistoryDo.WithContext(ctx)
}

func (u umsGrowthChangeHistory) TableName() string { return u.umsGrowthChangeHistoryDo.TableName() }

func (u umsGrowthChangeHistory) Alias() string { return u.umsGrowthChangeHistoryDo.Alias() }

func (u umsGrowthChangeHistory) Columns(cols ...field.Expr) gen.Columns {
	return u.umsGrowthChangeHistoryDo.Columns(cols...)
}

func (u *umsGrowthChangeHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsGrowthChangeHistory) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["change_type"] = u.ChangeType
	u.fieldMap["change_count"] = u.ChangeCount
	u.fieldMap["operate_man"] = u.OperateMan
	u.fieldMap["operate_note"] = u.OperateNote
	u.fieldMap["source_type"] = u.SourceType
}

func (u umsGrowthChangeHistory) clone(db *gorm.DB) umsGrowthChangeHistory {
	u.umsGrowthChangeHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsGrowthChangeHistory) replaceDB(db *gorm.DB) umsGrowthChangeHistory {
	u.umsGrowthChangeHistoryDo.ReplaceDB(db)
	return u
}

type umsGrowthChangeHistoryDo struct{ gen.DO }

type IUmsGrowthChangeHistoryDo interface {
	gen.SubQuery
	Debug() IUmsGrowthChangeHistoryDo
	WithContext(ctx context.Context) IUmsGrowthChangeHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsGrowthChangeHistoryDo
	WriteDB() IUmsGrowthChangeHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsGrowthChangeHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsGrowthChangeHistoryDo
	Not(conds ...gen.Condition) IUmsGrowthChangeHistoryDo
	Or(conds ...gen.Condition) IUmsGrowthChangeHistoryDo
	Select(conds ...field.Expr) IUmsGrowthChangeHistoryDo
	Where(conds ...gen.Condition) IUmsGrowthChangeHistoryDo
	Order(conds ...field.Expr) IUmsGrowthChangeHistoryDo
	Distinct(cols ...field.Expr) IUmsGrowthChangeHistoryDo
	Omit(cols ...field.Expr) IUmsGrowthChangeHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo
	Group(cols ...field.Expr) IUmsGrowthChangeHistoryDo
	Having(conds ...gen.Condition) IUmsGrowthChangeHistoryDo
	Limit(limit int) IUmsGrowthChangeHistoryDo
	Offset(offset int) IUmsGrowthChangeHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsGrowthChangeHistoryDo
	Unscoped() IUmsGrowthChangeHistoryDo
	Create(values ...*model.UmsGrowthChangeHistory) error
	CreateInBatches(values []*model.UmsGrowthChangeHistory, batchSize int) error
	Save(values ...*model.UmsGrowthChangeHistory) error
	First() (*model.UmsGrowthChangeHistory, error)
	Take() (*model.UmsGrowthChangeHistory, error)
	Last() (*model.UmsGrowthChangeHistory, error)
	Find() ([]*model.UmsGrowthChangeHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsGrowthChangeHistory, err error)
	FindInBatches(result *[]*model.UmsGrowthChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsGrowthChangeHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsGrowthChangeHistoryDo
	Assign(attrs ...field.AssignExpr) IUmsGrowthChangeHistoryDo
	Joins(fields ...field.RelationField) IUmsGrowthChangeHistoryDo
	Preload(fields ...field.RelationField) IUmsGrowthChangeHistoryDo
	FirstOrInit() (*model.UmsGrowthChangeHistory, error)
	FirstOrCreate() (*model.UmsGrowthChangeHistory, error)
	FindByPage(offset int, limit int) (result []*model.UmsGrowthChangeHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsGrowthChangeHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsGrowthChangeHistoryDo) Debug() IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Debug())
}

func (u umsGrowthChangeHistoryDo) WithContext(ctx context.Context) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsGrowthChangeHistoryDo) ReadDB() IUmsGrowthChangeHistoryDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsGrowthChangeHistoryDo) WriteDB() IUmsGrowthChangeHistoryDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsGrowthChangeHistoryDo) Session(config *gorm.Session) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsGrowthChangeHistoryDo) Clauses(conds ...clause.Expression) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsGrowthChangeHistoryDo) Returning(value interface{}, columns ...string) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsGrowthChangeHistoryDo) Not(conds ...gen.Condition) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsGrowthChangeHistoryDo) Or(conds ...gen.Condition) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsGrowthChangeHistoryDo) Select(conds ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsGrowthChangeHistoryDo) Where(conds ...gen.Condition) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsGrowthChangeHistoryDo) Order(conds ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsGrowthChangeHistoryDo) Distinct(cols ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsGrowthChangeHistoryDo) Omit(cols ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsGrowthChangeHistoryDo) Join(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsGrowthChangeHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsGrowthChangeHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsGrowthChangeHistoryDo) Group(cols ...field.Expr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsGrowthChangeHistoryDo) Having(conds ...gen.Condition) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsGrowthChangeHistoryDo) Limit(limit int) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsGrowthChangeHistoryDo) Offset(offset int) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsGrowthChangeHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsGrowthChangeHistoryDo) Unscoped() IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsGrowthChangeHistoryDo) Create(values ...*model.UmsGrowthChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsGrowthChangeHistoryDo) CreateInBatches(values []*model.UmsGrowthChangeHistory, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsGrowthChangeHistoryDo) Save(values ...*model.UmsGrowthChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsGrowthChangeHistoryDo) First() (*model.UmsGrowthChangeHistory, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthChangeHistory), nil
	}
}

func (u umsGrowthChangeHistoryDo) Take() (*model.UmsGrowthChangeHistory, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthChangeHistory), nil
	}
}

func (u umsGrowthChangeHistoryDo) Last() (*model.UmsGrowthChangeHistory, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthChangeHistory), nil
	}
}

func (u umsGrowthChangeHistoryDo) Find() ([]*model.UmsGrowthChangeHistory, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsGrowthChangeHistory), err
}

func (u umsGrowthChangeHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsGrowthChangeHistory, err error) {
	buf := make([]*model.UmsGrowthChangeHistory, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsGrowthChangeHistoryDo) FindInBatches(result *[]*model.UmsGrowthChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsGrowthChangeHistoryDo) Attrs(attrs ...field.AssignExpr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsGrowthChangeHistoryDo) Assign(attrs ...field.AssignExpr) IUmsGrowthChangeHistoryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsGrowthChangeHistoryDo) Joins(fields ...field.RelationField) IUmsGrowthChangeHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsGrowthChangeHistoryDo) Preload(fields ...field.RelationField) IUmsGrowthChangeHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsGrowthChangeHistoryDo) FirstOrInit() (*model.UmsGrowthChangeHistory, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthChangeHistory), nil
	}
}

func (u umsGrowthChangeHistoryDo) FirstOrCreate() (*model.UmsGrowthChangeHistory, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsGrowthChangeHistory), nil
	}
}

func (u umsGrowthChangeHistoryDo) FindByPage(offset int, limit int) (result []*model.UmsGrowthChangeHistory, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsGrowthChangeHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsGrowthChangeHistoryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsGrowthChangeHistoryDo) Delete(models ...*model.UmsGrowthChangeHistory) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsGrowthChangeHistoryDo) withDO(do gen.Dao) *umsGrowthChangeHistoryDo {
	u.DO = *do.(*gen.DO)
	return u
}
