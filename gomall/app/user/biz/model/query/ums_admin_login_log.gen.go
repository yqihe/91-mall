// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsAdminLoginLog(db *gorm.DB, opts ...gen.DOOption) umsAdminLoginLog {
	_umsAdminLoginLog := umsAdminLoginLog{}

	_umsAdminLoginLog.umsAdminLoginLogDo.UseDB(db, opts...)
	_umsAdminLoginLog.umsAdminLoginLogDo.UseModel(&model.UmsAdminLoginLog{})

	tableName := _umsAdminLoginLog.umsAdminLoginLogDo.TableName()
	_umsAdminLoginLog.ALL = field.NewAsterisk(tableName)
	_umsAdminLoginLog.ID = field.NewInt64(tableName, "id")
	_umsAdminLoginLog.AdminID = field.NewInt64(tableName, "admin_id")
	_umsAdminLoginLog.CreateTime = field.NewTime(tableName, "create_time")
	_umsAdminLoginLog.IP = field.NewString(tableName, "ip")
	_umsAdminLoginLog.Address = field.NewString(tableName, "address")
	_umsAdminLoginLog.UserAgent = field.NewString(tableName, "user_agent")

	_umsAdminLoginLog.fillFieldMap()

	return _umsAdminLoginLog
}

// umsAdminLoginLog 后台用户登录日志表
type umsAdminLoginLog struct {
	umsAdminLoginLogDo umsAdminLoginLogDo

	ALL        field.Asterisk
	ID         field.Int64
	AdminID    field.Int64
	CreateTime field.Time
	IP         field.String
	Address    field.String
	UserAgent  field.String // 浏览器登录类型

	fieldMap map[string]field.Expr
}

func (u umsAdminLoginLog) Table(newTableName string) *umsAdminLoginLog {
	u.umsAdminLoginLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdminLoginLog) As(alias string) *umsAdminLoginLog {
	u.umsAdminLoginLogDo.DO = *(u.umsAdminLoginLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdminLoginLog) updateTableName(table string) *umsAdminLoginLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.IP = field.NewString(table, "ip")
	u.Address = field.NewString(table, "address")
	u.UserAgent = field.NewString(table, "user_agent")

	u.fillFieldMap()

	return u
}

func (u *umsAdminLoginLog) WithContext(ctx context.Context) IUmsAdminLoginLogDo {
	return u.umsAdminLoginLogDo.WithContext(ctx)
}

func (u umsAdminLoginLog) TableName() string { return u.umsAdminLoginLogDo.TableName() }

func (u umsAdminLoginLog) Alias() string { return u.umsAdminLoginLogDo.Alias() }

func (u umsAdminLoginLog) Columns(cols ...field.Expr) gen.Columns {
	return u.umsAdminLoginLogDo.Columns(cols...)
}

func (u *umsAdminLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdminLoginLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["ip"] = u.IP
	u.fieldMap["address"] = u.Address
	u.fieldMap["user_agent"] = u.UserAgent
}

func (u umsAdminLoginLog) clone(db *gorm.DB) umsAdminLoginLog {
	u.umsAdminLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsAdminLoginLog) replaceDB(db *gorm.DB) umsAdminLoginLog {
	u.umsAdminLoginLogDo.ReplaceDB(db)
	return u
}

type umsAdminLoginLogDo struct{ gen.DO }

type IUmsAdminLoginLogDo interface {
	gen.SubQuery
	Debug() IUmsAdminLoginLogDo
	WithContext(ctx context.Context) IUmsAdminLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsAdminLoginLogDo
	WriteDB() IUmsAdminLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsAdminLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsAdminLoginLogDo
	Not(conds ...gen.Condition) IUmsAdminLoginLogDo
	Or(conds ...gen.Condition) IUmsAdminLoginLogDo
	Select(conds ...field.Expr) IUmsAdminLoginLogDo
	Where(conds ...gen.Condition) IUmsAdminLoginLogDo
	Order(conds ...field.Expr) IUmsAdminLoginLogDo
	Distinct(cols ...field.Expr) IUmsAdminLoginLogDo
	Omit(cols ...field.Expr) IUmsAdminLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo
	Group(cols ...field.Expr) IUmsAdminLoginLogDo
	Having(conds ...gen.Condition) IUmsAdminLoginLogDo
	Limit(limit int) IUmsAdminLoginLogDo
	Offset(offset int) IUmsAdminLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminLoginLogDo
	Unscoped() IUmsAdminLoginLogDo
	Create(values ...*model.UmsAdminLoginLog) error
	CreateInBatches(values []*model.UmsAdminLoginLog, batchSize int) error
	Save(values ...*model.UmsAdminLoginLog) error
	First() (*model.UmsAdminLoginLog, error)
	Take() (*model.UmsAdminLoginLog, error)
	Last() (*model.UmsAdminLoginLog, error)
	Find() ([]*model.UmsAdminLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminLoginLog, err error)
	FindInBatches(result *[]*model.UmsAdminLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsAdminLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsAdminLoginLogDo
	Assign(attrs ...field.AssignExpr) IUmsAdminLoginLogDo
	Joins(fields ...field.RelationField) IUmsAdminLoginLogDo
	Preload(fields ...field.RelationField) IUmsAdminLoginLogDo
	FirstOrInit() (*model.UmsAdminLoginLog, error)
	FirstOrCreate() (*model.UmsAdminLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsAdminLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsAdminLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsAdminLoginLogDo) Debug() IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminLoginLogDo) WithContext(ctx context.Context) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminLoginLogDo) ReadDB() IUmsAdminLoginLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminLoginLogDo) WriteDB() IUmsAdminLoginLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminLoginLogDo) Session(config *gorm.Session) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsAdminLoginLogDo) Clauses(conds ...clause.Expression) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminLoginLogDo) Returning(value interface{}, columns ...string) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminLoginLogDo) Not(conds ...gen.Condition) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminLoginLogDo) Or(conds ...gen.Condition) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminLoginLogDo) Select(conds ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminLoginLogDo) Where(conds ...gen.Condition) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminLoginLogDo) Order(conds ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminLoginLogDo) Distinct(cols ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminLoginLogDo) Omit(cols ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminLoginLogDo) Group(cols ...field.Expr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminLoginLogDo) Having(conds ...gen.Condition) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminLoginLogDo) Limit(limit int) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminLoginLogDo) Offset(offset int) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminLoginLogDo) Unscoped() IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminLoginLogDo) Create(values ...*model.UmsAdminLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminLoginLogDo) CreateInBatches(values []*model.UmsAdminLoginLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminLoginLogDo) Save(values ...*model.UmsAdminLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminLoginLogDo) First() (*model.UmsAdminLoginLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminLoginLog), nil
	}
}

func (u umsAdminLoginLogDo) Take() (*model.UmsAdminLoginLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminLoginLog), nil
	}
}

func (u umsAdminLoginLogDo) Last() (*model.UmsAdminLoginLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminLoginLog), nil
	}
}

func (u umsAdminLoginLogDo) Find() ([]*model.UmsAdminLoginLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdminLoginLog), err
}

func (u umsAdminLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminLoginLog, err error) {
	buf := make([]*model.UmsAdminLoginLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminLoginLogDo) FindInBatches(result *[]*model.UmsAdminLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminLoginLogDo) Attrs(attrs ...field.AssignExpr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminLoginLogDo) Assign(attrs ...field.AssignExpr) IUmsAdminLoginLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminLoginLogDo) Joins(fields ...field.RelationField) IUmsAdminLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminLoginLogDo) Preload(fields ...field.RelationField) IUmsAdminLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminLoginLogDo) FirstOrInit() (*model.UmsAdminLoginLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminLoginLog), nil
	}
}

func (u umsAdminLoginLogDo) FirstOrCreate() (*model.UmsAdminLoginLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminLoginLog), nil
	}
}

func (u umsAdminLoginLogDo) FindByPage(offset int, limit int) (result []*model.UmsAdminLoginLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminLoginLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminLoginLogDo) Delete(models ...*model.UmsAdminLoginLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminLoginLogDo) withDO(do gen.Dao) *umsAdminLoginLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
