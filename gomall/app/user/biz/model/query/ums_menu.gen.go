// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsMenu(db *gorm.DB, opts ...gen.DOOption) umsMenu {
	_umsMenu := umsMenu{}

	_umsMenu.umsMenuDo.UseDB(db, opts...)
	_umsMenu.umsMenuDo.UseModel(&model.UmsMenu{})

	tableName := _umsMenu.umsMenuDo.TableName()
	_umsMenu.ALL = field.NewAsterisk(tableName)
	_umsMenu.ID = field.NewInt64(tableName, "id")
	_umsMenu.ParentID = field.NewInt64(tableName, "parent_id")
	_umsMenu.CreateTime = field.NewTime(tableName, "create_time")
	_umsMenu.Title = field.NewString(tableName, "title")
	_umsMenu.Level = field.NewInt32(tableName, "level")
	_umsMenu.Sort = field.NewInt32(tableName, "sort")
	_umsMenu.Name = field.NewString(tableName, "name")
	_umsMenu.Icon = field.NewString(tableName, "icon")
	_umsMenu.Hidden = field.NewInt32(tableName, "hidden")

	_umsMenu.fillFieldMap()

	return _umsMenu
}

// umsMenu 后台菜单表
type umsMenu struct {
	umsMenuDo

	ALL        field.Asterisk
	ID         field.Int64
	ParentID   field.Int64  // 父级ID
	CreateTime field.Time   // 创建时间
	Title      field.String // 菜单名称
	Level      field.Int32  // 菜单级数
	Sort       field.Int32  // 菜单排序
	Name       field.String // 前端名称
	Icon       field.String // 前端图标
	Hidden     field.Int32  // 前端隐藏

	fieldMap map[string]field.Expr
}

func (u umsMenu) Table(newTableName string) *umsMenu {
	u.umsMenuDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMenu) As(alias string) *umsMenu {
	u.umsMenuDo.DO = *(u.umsMenuDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMenu) updateTableName(table string) *umsMenu {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ParentID = field.NewInt64(table, "parent_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Title = field.NewString(table, "title")
	u.Level = field.NewInt32(table, "level")
	u.Sort = field.NewInt32(table, "sort")
	u.Name = field.NewString(table, "name")
	u.Icon = field.NewString(table, "icon")
	u.Hidden = field.NewInt32(table, "hidden")

	u.fillFieldMap()

	return u
}

func (u *umsMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMenu) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["title"] = u.Title
	u.fieldMap["level"] = u.Level
	u.fieldMap["sort"] = u.Sort
	u.fieldMap["name"] = u.Name
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["hidden"] = u.Hidden
}

func (u umsMenu) clone(db *gorm.DB) umsMenu {
	u.umsMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMenu) replaceDB(db *gorm.DB) umsMenu {
	u.umsMenuDo.ReplaceDB(db)
	return u
}

type umsMenuDo struct{ gen.DO }

type IUmsMenuDo interface {
	gen.SubQuery
	Debug() IUmsMenuDo
	WithContext(ctx context.Context) IUmsMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMenuDo
	WriteDB() IUmsMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMenuDo
	Not(conds ...gen.Condition) IUmsMenuDo
	Or(conds ...gen.Condition) IUmsMenuDo
	Select(conds ...field.Expr) IUmsMenuDo
	Where(conds ...gen.Condition) IUmsMenuDo
	Order(conds ...field.Expr) IUmsMenuDo
	Distinct(cols ...field.Expr) IUmsMenuDo
	Omit(cols ...field.Expr) IUmsMenuDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMenuDo
	Group(cols ...field.Expr) IUmsMenuDo
	Having(conds ...gen.Condition) IUmsMenuDo
	Limit(limit int) IUmsMenuDo
	Offset(offset int) IUmsMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMenuDo
	Unscoped() IUmsMenuDo
	Create(values ...*model.UmsMenu) error
	CreateInBatches(values []*model.UmsMenu, batchSize int) error
	Save(values ...*model.UmsMenu) error
	First() (*model.UmsMenu, error)
	Take() (*model.UmsMenu, error)
	Last() (*model.UmsMenu, error)
	Find() ([]*model.UmsMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMenu, err error)
	FindInBatches(result *[]*model.UmsMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMenuDo
	Assign(attrs ...field.AssignExpr) IUmsMenuDo
	Joins(fields ...field.RelationField) IUmsMenuDo
	Preload(fields ...field.RelationField) IUmsMenuDo
	FirstOrInit() (*model.UmsMenu, error)
	FirstOrCreate() (*model.UmsMenu, error)
	FindByPage(offset int, limit int) (result []*model.UmsMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMenuDo) Debug() IUmsMenuDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMenuDo) WithContext(ctx context.Context) IUmsMenuDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMenuDo) ReadDB() IUmsMenuDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMenuDo) WriteDB() IUmsMenuDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMenuDo) Session(config *gorm.Session) IUmsMenuDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMenuDo) Clauses(conds ...clause.Expression) IUmsMenuDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMenuDo) Returning(value interface{}, columns ...string) IUmsMenuDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMenuDo) Not(conds ...gen.Condition) IUmsMenuDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMenuDo) Or(conds ...gen.Condition) IUmsMenuDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMenuDo) Select(conds ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMenuDo) Where(conds ...gen.Condition) IUmsMenuDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMenuDo) Order(conds ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMenuDo) Distinct(cols ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMenuDo) Omit(cols ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMenuDo) Join(table schema.Tabler, on ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMenuDo) Group(cols ...field.Expr) IUmsMenuDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMenuDo) Having(conds ...gen.Condition) IUmsMenuDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMenuDo) Limit(limit int) IUmsMenuDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMenuDo) Offset(offset int) IUmsMenuDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMenuDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMenuDo) Unscoped() IUmsMenuDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMenuDo) Create(values ...*model.UmsMenu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMenuDo) CreateInBatches(values []*model.UmsMenu, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMenuDo) Save(values ...*model.UmsMenu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMenuDo) First() (*model.UmsMenu, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMenu), nil
	}
}

func (u umsMenuDo) Take() (*model.UmsMenu, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMenu), nil
	}
}

func (u umsMenuDo) Last() (*model.UmsMenu, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMenu), nil
	}
}

func (u umsMenuDo) Find() ([]*model.UmsMenu, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMenu), err
}

func (u umsMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMenu, err error) {
	buf := make([]*model.UmsMenu, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMenuDo) FindInBatches(result *[]*model.UmsMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMenuDo) Attrs(attrs ...field.AssignExpr) IUmsMenuDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMenuDo) Assign(attrs ...field.AssignExpr) IUmsMenuDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMenuDo) Joins(fields ...field.RelationField) IUmsMenuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMenuDo) Preload(fields ...field.RelationField) IUmsMenuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMenuDo) FirstOrInit() (*model.UmsMenu, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMenu), nil
	}
}

func (u umsMenuDo) FirstOrCreate() (*model.UmsMenu, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMenu), nil
	}
}

func (u umsMenuDo) FindByPage(offset int, limit int) (result []*model.UmsMenu, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMenuDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMenuDo) Delete(models ...*model.UmsMenu) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMenuDo) withDO(do gen.Dao) *umsMenuDo {
	u.DO = *do.(*gen.DO)
	return u
}
