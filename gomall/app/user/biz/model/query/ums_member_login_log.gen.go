// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsMemberLoginLog(db *gorm.DB, opts ...gen.DOOption) umsMemberLoginLog {
	_umsMemberLoginLog := umsMemberLoginLog{}

	_umsMemberLoginLog.umsMemberLoginLogDo.UseDB(db, opts...)
	_umsMemberLoginLog.umsMemberLoginLogDo.UseModel(&model.UmsMemberLoginLog{})

	tableName := _umsMemberLoginLog.umsMemberLoginLogDo.TableName()
	_umsMemberLoginLog.ALL = field.NewAsterisk(tableName)
	_umsMemberLoginLog.ID = field.NewInt64(tableName, "id")
	_umsMemberLoginLog.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberLoginLog.CreateTime = field.NewTime(tableName, "create_time")
	_umsMemberLoginLog.IP = field.NewString(tableName, "ip")
	_umsMemberLoginLog.City = field.NewString(tableName, "city")
	_umsMemberLoginLog.LoginType = field.NewInt32(tableName, "login_type")
	_umsMemberLoginLog.Province = field.NewString(tableName, "province")

	_umsMemberLoginLog.fillFieldMap()

	return _umsMemberLoginLog
}

// umsMemberLoginLog 会员登录记录
type umsMemberLoginLog struct {
	umsMemberLoginLogDo umsMemberLoginLogDo

	ALL        field.Asterisk
	ID         field.Int64
	MemberID   field.Int64
	CreateTime field.Time
	IP         field.String
	City       field.String
	LoginType  field.Int32 // 登录类型：0->PC；1->android;2->ios;3->小程序
	Province   field.String

	fieldMap map[string]field.Expr
}

func (u umsMemberLoginLog) Table(newTableName string) *umsMemberLoginLog {
	u.umsMemberLoginLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberLoginLog) As(alias string) *umsMemberLoginLog {
	u.umsMemberLoginLogDo.DO = *(u.umsMemberLoginLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberLoginLog) updateTableName(table string) *umsMemberLoginLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.IP = field.NewString(table, "ip")
	u.City = field.NewString(table, "city")
	u.LoginType = field.NewInt32(table, "login_type")
	u.Province = field.NewString(table, "province")

	u.fillFieldMap()

	return u
}

func (u *umsMemberLoginLog) WithContext(ctx context.Context) IUmsMemberLoginLogDo {
	return u.umsMemberLoginLogDo.WithContext(ctx)
}

func (u umsMemberLoginLog) TableName() string { return u.umsMemberLoginLogDo.TableName() }

func (u umsMemberLoginLog) Alias() string { return u.umsMemberLoginLogDo.Alias() }

func (u umsMemberLoginLog) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberLoginLogDo.Columns(cols...)
}

func (u *umsMemberLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberLoginLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["ip"] = u.IP
	u.fieldMap["city"] = u.City
	u.fieldMap["login_type"] = u.LoginType
	u.fieldMap["province"] = u.Province
}

func (u umsMemberLoginLog) clone(db *gorm.DB) umsMemberLoginLog {
	u.umsMemberLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberLoginLog) replaceDB(db *gorm.DB) umsMemberLoginLog {
	u.umsMemberLoginLogDo.ReplaceDB(db)
	return u
}

type umsMemberLoginLogDo struct{ gen.DO }

type IUmsMemberLoginLogDo interface {
	gen.SubQuery
	Debug() IUmsMemberLoginLogDo
	WithContext(ctx context.Context) IUmsMemberLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberLoginLogDo
	WriteDB() IUmsMemberLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberLoginLogDo
	Not(conds ...gen.Condition) IUmsMemberLoginLogDo
	Or(conds ...gen.Condition) IUmsMemberLoginLogDo
	Select(conds ...field.Expr) IUmsMemberLoginLogDo
	Where(conds ...gen.Condition) IUmsMemberLoginLogDo
	Order(conds ...field.Expr) IUmsMemberLoginLogDo
	Distinct(cols ...field.Expr) IUmsMemberLoginLogDo
	Omit(cols ...field.Expr) IUmsMemberLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo
	Group(cols ...field.Expr) IUmsMemberLoginLogDo
	Having(conds ...gen.Condition) IUmsMemberLoginLogDo
	Limit(limit int) IUmsMemberLoginLogDo
	Offset(offset int) IUmsMemberLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberLoginLogDo
	Unscoped() IUmsMemberLoginLogDo
	Create(values ...*model.UmsMemberLoginLog) error
	CreateInBatches(values []*model.UmsMemberLoginLog, batchSize int) error
	Save(values ...*model.UmsMemberLoginLog) error
	First() (*model.UmsMemberLoginLog, error)
	Take() (*model.UmsMemberLoginLog, error)
	Last() (*model.UmsMemberLoginLog, error)
	Find() ([]*model.UmsMemberLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberLoginLog, err error)
	FindInBatches(result *[]*model.UmsMemberLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberLoginLogDo
	Assign(attrs ...field.AssignExpr) IUmsMemberLoginLogDo
	Joins(fields ...field.RelationField) IUmsMemberLoginLogDo
	Preload(fields ...field.RelationField) IUmsMemberLoginLogDo
	FirstOrInit() (*model.UmsMemberLoginLog, error)
	FirstOrCreate() (*model.UmsMemberLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberLoginLogDo) Debug() IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberLoginLogDo) WithContext(ctx context.Context) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberLoginLogDo) ReadDB() IUmsMemberLoginLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberLoginLogDo) WriteDB() IUmsMemberLoginLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberLoginLogDo) Session(config *gorm.Session) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberLoginLogDo) Clauses(conds ...clause.Expression) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberLoginLogDo) Returning(value interface{}, columns ...string) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberLoginLogDo) Not(conds ...gen.Condition) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberLoginLogDo) Or(conds ...gen.Condition) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberLoginLogDo) Select(conds ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberLoginLogDo) Where(conds ...gen.Condition) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberLoginLogDo) Order(conds ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberLoginLogDo) Distinct(cols ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberLoginLogDo) Omit(cols ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberLoginLogDo) Group(cols ...field.Expr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberLoginLogDo) Having(conds ...gen.Condition) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberLoginLogDo) Limit(limit int) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberLoginLogDo) Offset(offset int) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberLoginLogDo) Unscoped() IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberLoginLogDo) Create(values ...*model.UmsMemberLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberLoginLogDo) CreateInBatches(values []*model.UmsMemberLoginLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberLoginLogDo) Save(values ...*model.UmsMemberLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberLoginLogDo) First() (*model.UmsMemberLoginLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLoginLog), nil
	}
}

func (u umsMemberLoginLogDo) Take() (*model.UmsMemberLoginLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLoginLog), nil
	}
}

func (u umsMemberLoginLogDo) Last() (*model.UmsMemberLoginLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLoginLog), nil
	}
}

func (u umsMemberLoginLogDo) Find() ([]*model.UmsMemberLoginLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberLoginLog), err
}

func (u umsMemberLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberLoginLog, err error) {
	buf := make([]*model.UmsMemberLoginLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberLoginLogDo) FindInBatches(result *[]*model.UmsMemberLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberLoginLogDo) Attrs(attrs ...field.AssignExpr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberLoginLogDo) Assign(attrs ...field.AssignExpr) IUmsMemberLoginLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberLoginLogDo) Joins(fields ...field.RelationField) IUmsMemberLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberLoginLogDo) Preload(fields ...field.RelationField) IUmsMemberLoginLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberLoginLogDo) FirstOrInit() (*model.UmsMemberLoginLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLoginLog), nil
	}
}

func (u umsMemberLoginLogDo) FirstOrCreate() (*model.UmsMemberLoginLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberLoginLog), nil
	}
}

func (u umsMemberLoginLogDo) FindByPage(offset int, limit int) (result []*model.UmsMemberLoginLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberLoginLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberLoginLogDo) Delete(models ...*model.UmsMemberLoginLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberLoginLogDo) withDO(do gen.Dao) *umsMemberLoginLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
