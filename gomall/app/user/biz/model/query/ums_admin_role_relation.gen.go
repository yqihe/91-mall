// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsAdminRoleRelation(db *gorm.DB, opts ...gen.DOOption) umsAdminRoleRelation {
	_umsAdminRoleRelation := umsAdminRoleRelation{}

	_umsAdminRoleRelation.umsAdminRoleRelationDo.UseDB(db, opts...)
	_umsAdminRoleRelation.umsAdminRoleRelationDo.UseModel(&model.UmsAdminRoleRelation{})

	tableName := _umsAdminRoleRelation.umsAdminRoleRelationDo.TableName()
	_umsAdminRoleRelation.ALL = field.NewAsterisk(tableName)
	_umsAdminRoleRelation.ID = field.NewInt64(tableName, "id")
	_umsAdminRoleRelation.AdminID = field.NewInt64(tableName, "admin_id")
	_umsAdminRoleRelation.RoleID = field.NewInt64(tableName, "role_id")

	_umsAdminRoleRelation.fillFieldMap()

	return _umsAdminRoleRelation
}

// umsAdminRoleRelation 后台用户和角色关系表
type umsAdminRoleRelation struct {
	umsAdminRoleRelationDo umsAdminRoleRelationDo

	ALL     field.Asterisk
	ID      field.Int64
	AdminID field.Int64
	RoleID  field.Int64

	fieldMap map[string]field.Expr
}

func (u umsAdminRoleRelation) Table(newTableName string) *umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdminRoleRelation) As(alias string) *umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.DO = *(u.umsAdminRoleRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdminRoleRelation) updateTableName(table string) *umsAdminRoleRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.RoleID = field.NewInt64(table, "role_id")

	u.fillFieldMap()

	return u
}

func (u *umsAdminRoleRelation) WithContext(ctx context.Context) IUmsAdminRoleRelationDo {
	return u.umsAdminRoleRelationDo.WithContext(ctx)
}

func (u umsAdminRoleRelation) TableName() string { return u.umsAdminRoleRelationDo.TableName() }

func (u umsAdminRoleRelation) Alias() string { return u.umsAdminRoleRelationDo.Alias() }

func (u umsAdminRoleRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsAdminRoleRelationDo.Columns(cols...)
}

func (u *umsAdminRoleRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdminRoleRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["role_id"] = u.RoleID
}

func (u umsAdminRoleRelation) clone(db *gorm.DB) umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsAdminRoleRelation) replaceDB(db *gorm.DB) umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.ReplaceDB(db)
	return u
}

type umsAdminRoleRelationDo struct{ gen.DO }

type IUmsAdminRoleRelationDo interface {
	gen.SubQuery
	Debug() IUmsAdminRoleRelationDo
	WithContext(ctx context.Context) IUmsAdminRoleRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsAdminRoleRelationDo
	WriteDB() IUmsAdminRoleRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsAdminRoleRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsAdminRoleRelationDo
	Not(conds ...gen.Condition) IUmsAdminRoleRelationDo
	Or(conds ...gen.Condition) IUmsAdminRoleRelationDo
	Select(conds ...field.Expr) IUmsAdminRoleRelationDo
	Where(conds ...gen.Condition) IUmsAdminRoleRelationDo
	Order(conds ...field.Expr) IUmsAdminRoleRelationDo
	Distinct(cols ...field.Expr) IUmsAdminRoleRelationDo
	Omit(cols ...field.Expr) IUmsAdminRoleRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo
	Group(cols ...field.Expr) IUmsAdminRoleRelationDo
	Having(conds ...gen.Condition) IUmsAdminRoleRelationDo
	Limit(limit int) IUmsAdminRoleRelationDo
	Offset(offset int) IUmsAdminRoleRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminRoleRelationDo
	Unscoped() IUmsAdminRoleRelationDo
	Create(values ...*model.UmsAdminRoleRelation) error
	CreateInBatches(values []*model.UmsAdminRoleRelation, batchSize int) error
	Save(values ...*model.UmsAdminRoleRelation) error
	First() (*model.UmsAdminRoleRelation, error)
	Take() (*model.UmsAdminRoleRelation, error)
	Last() (*model.UmsAdminRoleRelation, error)
	Find() ([]*model.UmsAdminRoleRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminRoleRelation, err error)
	FindInBatches(result *[]*model.UmsAdminRoleRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsAdminRoleRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsAdminRoleRelationDo
	Assign(attrs ...field.AssignExpr) IUmsAdminRoleRelationDo
	Joins(fields ...field.RelationField) IUmsAdminRoleRelationDo
	Preload(fields ...field.RelationField) IUmsAdminRoleRelationDo
	FirstOrInit() (*model.UmsAdminRoleRelation, error)
	FirstOrCreate() (*model.UmsAdminRoleRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsAdminRoleRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsAdminRoleRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsAdminRoleRelationDo) Debug() IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminRoleRelationDo) WithContext(ctx context.Context) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminRoleRelationDo) ReadDB() IUmsAdminRoleRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminRoleRelationDo) WriteDB() IUmsAdminRoleRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminRoleRelationDo) Session(config *gorm.Session) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsAdminRoleRelationDo) Clauses(conds ...clause.Expression) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminRoleRelationDo) Returning(value interface{}, columns ...string) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminRoleRelationDo) Not(conds ...gen.Condition) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminRoleRelationDo) Or(conds ...gen.Condition) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminRoleRelationDo) Select(conds ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminRoleRelationDo) Where(conds ...gen.Condition) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminRoleRelationDo) Order(conds ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminRoleRelationDo) Distinct(cols ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminRoleRelationDo) Omit(cols ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminRoleRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminRoleRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminRoleRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminRoleRelationDo) Group(cols ...field.Expr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminRoleRelationDo) Having(conds ...gen.Condition) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminRoleRelationDo) Limit(limit int) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminRoleRelationDo) Offset(offset int) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminRoleRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminRoleRelationDo) Unscoped() IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminRoleRelationDo) Create(values ...*model.UmsAdminRoleRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminRoleRelationDo) CreateInBatches(values []*model.UmsAdminRoleRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminRoleRelationDo) Save(values ...*model.UmsAdminRoleRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminRoleRelationDo) First() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Take() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Last() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Find() ([]*model.UmsAdminRoleRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdminRoleRelation), err
}

func (u umsAdminRoleRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminRoleRelation, err error) {
	buf := make([]*model.UmsAdminRoleRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminRoleRelationDo) FindInBatches(result *[]*model.UmsAdminRoleRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminRoleRelationDo) Attrs(attrs ...field.AssignExpr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminRoleRelationDo) Assign(attrs ...field.AssignExpr) IUmsAdminRoleRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminRoleRelationDo) Joins(fields ...field.RelationField) IUmsAdminRoleRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminRoleRelationDo) Preload(fields ...field.RelationField) IUmsAdminRoleRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminRoleRelationDo) FirstOrInit() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) FirstOrCreate() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) FindByPage(offset int, limit int) (result []*model.UmsAdminRoleRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminRoleRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminRoleRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminRoleRelationDo) Delete(models ...*model.UmsAdminRoleRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminRoleRelationDo) withDO(do gen.Dao) *umsAdminRoleRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
