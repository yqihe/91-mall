// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsRoleMenuRelation(db *gorm.DB, opts ...gen.DOOption) umsRoleMenuRelation {
	_umsRoleMenuRelation := umsRoleMenuRelation{}

	_umsRoleMenuRelation.umsRoleMenuRelationDo.UseDB(db, opts...)
	_umsRoleMenuRelation.umsRoleMenuRelationDo.UseModel(&model.UmsRoleMenuRelation{})

	tableName := _umsRoleMenuRelation.umsRoleMenuRelationDo.TableName()
	_umsRoleMenuRelation.ALL = field.NewAsterisk(tableName)
	_umsRoleMenuRelation.ID = field.NewInt64(tableName, "id")
	_umsRoleMenuRelation.RoleID = field.NewInt64(tableName, "role_id")
	_umsRoleMenuRelation.MenuID = field.NewInt64(tableName, "menu_id")

	_umsRoleMenuRelation.fillFieldMap()

	return _umsRoleMenuRelation
}

// umsRoleMenuRelation 后台角色菜单关系表
type umsRoleMenuRelation struct {
	umsRoleMenuRelationDo umsRoleMenuRelationDo

	ALL    field.Asterisk
	ID     field.Int64
	RoleID field.Int64 // 角色ID
	MenuID field.Int64 // 菜单ID

	fieldMap map[string]field.Expr
}

func (u umsRoleMenuRelation) Table(newTableName string) *umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRoleMenuRelation) As(alias string) *umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.DO = *(u.umsRoleMenuRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRoleMenuRelation) updateTableName(table string) *umsRoleMenuRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.RoleID = field.NewInt64(table, "role_id")
	u.MenuID = field.NewInt64(table, "menu_id")

	u.fillFieldMap()

	return u
}

func (u *umsRoleMenuRelation) WithContext(ctx context.Context) IUmsRoleMenuRelationDo {
	return u.umsRoleMenuRelationDo.WithContext(ctx)
}

func (u umsRoleMenuRelation) TableName() string { return u.umsRoleMenuRelationDo.TableName() }

func (u umsRoleMenuRelation) Alias() string { return u.umsRoleMenuRelationDo.Alias() }

func (u umsRoleMenuRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsRoleMenuRelationDo.Columns(cols...)
}

func (u *umsRoleMenuRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRoleMenuRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["menu_id"] = u.MenuID
}

func (u umsRoleMenuRelation) clone(db *gorm.DB) umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsRoleMenuRelation) replaceDB(db *gorm.DB) umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.ReplaceDB(db)
	return u
}

type umsRoleMenuRelationDo struct{ gen.DO }

type IUmsRoleMenuRelationDo interface {
	gen.SubQuery
	Debug() IUmsRoleMenuRelationDo
	WithContext(ctx context.Context) IUmsRoleMenuRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsRoleMenuRelationDo
	WriteDB() IUmsRoleMenuRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsRoleMenuRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsRoleMenuRelationDo
	Not(conds ...gen.Condition) IUmsRoleMenuRelationDo
	Or(conds ...gen.Condition) IUmsRoleMenuRelationDo
	Select(conds ...field.Expr) IUmsRoleMenuRelationDo
	Where(conds ...gen.Condition) IUmsRoleMenuRelationDo
	Order(conds ...field.Expr) IUmsRoleMenuRelationDo
	Distinct(cols ...field.Expr) IUmsRoleMenuRelationDo
	Omit(cols ...field.Expr) IUmsRoleMenuRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo
	Group(cols ...field.Expr) IUmsRoleMenuRelationDo
	Having(conds ...gen.Condition) IUmsRoleMenuRelationDo
	Limit(limit int) IUmsRoleMenuRelationDo
	Offset(offset int) IUmsRoleMenuRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleMenuRelationDo
	Unscoped() IUmsRoleMenuRelationDo
	Create(values ...*model.UmsRoleMenuRelation) error
	CreateInBatches(values []*model.UmsRoleMenuRelation, batchSize int) error
	Save(values ...*model.UmsRoleMenuRelation) error
	First() (*model.UmsRoleMenuRelation, error)
	Take() (*model.UmsRoleMenuRelation, error)
	Last() (*model.UmsRoleMenuRelation, error)
	Find() ([]*model.UmsRoleMenuRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRoleMenuRelation, err error)
	FindInBatches(result *[]*model.UmsRoleMenuRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsRoleMenuRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsRoleMenuRelationDo
	Assign(attrs ...field.AssignExpr) IUmsRoleMenuRelationDo
	Joins(fields ...field.RelationField) IUmsRoleMenuRelationDo
	Preload(fields ...field.RelationField) IUmsRoleMenuRelationDo
	FirstOrInit() (*model.UmsRoleMenuRelation, error)
	FirstOrCreate() (*model.UmsRoleMenuRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsRoleMenuRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsRoleMenuRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsRoleMenuRelationDo) Debug() IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRoleMenuRelationDo) WithContext(ctx context.Context) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRoleMenuRelationDo) ReadDB() IUmsRoleMenuRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRoleMenuRelationDo) WriteDB() IUmsRoleMenuRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRoleMenuRelationDo) Session(config *gorm.Session) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsRoleMenuRelationDo) Clauses(conds ...clause.Expression) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRoleMenuRelationDo) Returning(value interface{}, columns ...string) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRoleMenuRelationDo) Not(conds ...gen.Condition) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRoleMenuRelationDo) Or(conds ...gen.Condition) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRoleMenuRelationDo) Select(conds ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRoleMenuRelationDo) Where(conds ...gen.Condition) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRoleMenuRelationDo) Order(conds ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRoleMenuRelationDo) Distinct(cols ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRoleMenuRelationDo) Omit(cols ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRoleMenuRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRoleMenuRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRoleMenuRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRoleMenuRelationDo) Group(cols ...field.Expr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRoleMenuRelationDo) Having(conds ...gen.Condition) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRoleMenuRelationDo) Limit(limit int) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRoleMenuRelationDo) Offset(offset int) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRoleMenuRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRoleMenuRelationDo) Unscoped() IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRoleMenuRelationDo) Create(values ...*model.UmsRoleMenuRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRoleMenuRelationDo) CreateInBatches(values []*model.UmsRoleMenuRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRoleMenuRelationDo) Save(values ...*model.UmsRoleMenuRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRoleMenuRelationDo) First() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Take() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Last() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Find() ([]*model.UmsRoleMenuRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRoleMenuRelation), err
}

func (u umsRoleMenuRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRoleMenuRelation, err error) {
	buf := make([]*model.UmsRoleMenuRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRoleMenuRelationDo) FindInBatches(result *[]*model.UmsRoleMenuRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRoleMenuRelationDo) Attrs(attrs ...field.AssignExpr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRoleMenuRelationDo) Assign(attrs ...field.AssignExpr) IUmsRoleMenuRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRoleMenuRelationDo) Joins(fields ...field.RelationField) IUmsRoleMenuRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRoleMenuRelationDo) Preload(fields ...field.RelationField) IUmsRoleMenuRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRoleMenuRelationDo) FirstOrInit() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) FirstOrCreate() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) FindByPage(offset int, limit int) (result []*model.UmsRoleMenuRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRoleMenuRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRoleMenuRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRoleMenuRelationDo) Delete(models ...*model.UmsRoleMenuRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRoleMenuRelationDo) withDO(do gen.Dao) *umsRoleMenuRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
