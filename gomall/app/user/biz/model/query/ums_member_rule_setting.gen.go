// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yqihe/91-mall/gomall/app/user/biz/model/model"
)

func newUmsMemberRuleSetting(db *gorm.DB, opts ...gen.DOOption) umsMemberRuleSetting {
	_umsMemberRuleSetting := umsMemberRuleSetting{}

	_umsMemberRuleSetting.umsMemberRuleSettingDo.UseDB(db, opts...)
	_umsMemberRuleSetting.umsMemberRuleSettingDo.UseModel(&model.UmsMemberRuleSetting{})

	tableName := _umsMemberRuleSetting.umsMemberRuleSettingDo.TableName()
	_umsMemberRuleSetting.ALL = field.NewAsterisk(tableName)
	_umsMemberRuleSetting.ID = field.NewInt64(tableName, "id")
	_umsMemberRuleSetting.ContinueSignDay = field.NewInt32(tableName, "continue_sign_day")
	_umsMemberRuleSetting.ContinueSignPoint = field.NewInt32(tableName, "continue_sign_point")
	_umsMemberRuleSetting.ConsumePerPoint = field.NewFloat64(tableName, "consume_per_point")
	_umsMemberRuleSetting.LowOrderAmount = field.NewFloat64(tableName, "low_order_amount")
	_umsMemberRuleSetting.MaxPointPerOrder = field.NewInt32(tableName, "max_point_per_order")
	_umsMemberRuleSetting.Type = field.NewInt32(tableName, "type")

	_umsMemberRuleSetting.fillFieldMap()

	return _umsMemberRuleSetting
}

// umsMemberRuleSetting 会员积分成长规则表
type umsMemberRuleSetting struct {
	umsMemberRuleSettingDo umsMemberRuleSettingDo

	ALL               field.Asterisk
	ID                field.Int64
	ContinueSignDay   field.Int32   // 连续签到天数
	ContinueSignPoint field.Int32   // 连续签到赠送数量
	ConsumePerPoint   field.Float64 // 每消费多少元获取1个点
	LowOrderAmount    field.Float64 // 最低获取点数的订单金额
	MaxPointPerOrder  field.Int32   // 每笔订单最高获取点数
	Type              field.Int32   // 类型：0->积分规则；1->成长值规则

	fieldMap map[string]field.Expr
}

func (u umsMemberRuleSetting) Table(newTableName string) *umsMemberRuleSetting {
	u.umsMemberRuleSettingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberRuleSetting) As(alias string) *umsMemberRuleSetting {
	u.umsMemberRuleSettingDo.DO = *(u.umsMemberRuleSettingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberRuleSetting) updateTableName(table string) *umsMemberRuleSetting {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ContinueSignDay = field.NewInt32(table, "continue_sign_day")
	u.ContinueSignPoint = field.NewInt32(table, "continue_sign_point")
	u.ConsumePerPoint = field.NewFloat64(table, "consume_per_point")
	u.LowOrderAmount = field.NewFloat64(table, "low_order_amount")
	u.MaxPointPerOrder = field.NewInt32(table, "max_point_per_order")
	u.Type = field.NewInt32(table, "type")

	u.fillFieldMap()

	return u
}

func (u *umsMemberRuleSetting) WithContext(ctx context.Context) IUmsMemberRuleSettingDo {
	return u.umsMemberRuleSettingDo.WithContext(ctx)
}

func (u umsMemberRuleSetting) TableName() string { return u.umsMemberRuleSettingDo.TableName() }

func (u umsMemberRuleSetting) Alias() string { return u.umsMemberRuleSettingDo.Alias() }

func (u umsMemberRuleSetting) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberRuleSettingDo.Columns(cols...)
}

func (u *umsMemberRuleSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberRuleSetting) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["continue_sign_day"] = u.ContinueSignDay
	u.fieldMap["continue_sign_point"] = u.ContinueSignPoint
	u.fieldMap["consume_per_point"] = u.ConsumePerPoint
	u.fieldMap["low_order_amount"] = u.LowOrderAmount
	u.fieldMap["max_point_per_order"] = u.MaxPointPerOrder
	u.fieldMap["type"] = u.Type
}

func (u umsMemberRuleSetting) clone(db *gorm.DB) umsMemberRuleSetting {
	u.umsMemberRuleSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberRuleSetting) replaceDB(db *gorm.DB) umsMemberRuleSetting {
	u.umsMemberRuleSettingDo.ReplaceDB(db)
	return u
}

type umsMemberRuleSettingDo struct{ gen.DO }

type IUmsMemberRuleSettingDo interface {
	gen.SubQuery
	Debug() IUmsMemberRuleSettingDo
	WithContext(ctx context.Context) IUmsMemberRuleSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberRuleSettingDo
	WriteDB() IUmsMemberRuleSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberRuleSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberRuleSettingDo
	Not(conds ...gen.Condition) IUmsMemberRuleSettingDo
	Or(conds ...gen.Condition) IUmsMemberRuleSettingDo
	Select(conds ...field.Expr) IUmsMemberRuleSettingDo
	Where(conds ...gen.Condition) IUmsMemberRuleSettingDo
	Order(conds ...field.Expr) IUmsMemberRuleSettingDo
	Distinct(cols ...field.Expr) IUmsMemberRuleSettingDo
	Omit(cols ...field.Expr) IUmsMemberRuleSettingDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo
	Group(cols ...field.Expr) IUmsMemberRuleSettingDo
	Having(conds ...gen.Condition) IUmsMemberRuleSettingDo
	Limit(limit int) IUmsMemberRuleSettingDo
	Offset(offset int) IUmsMemberRuleSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberRuleSettingDo
	Unscoped() IUmsMemberRuleSettingDo
	Create(values ...*model.UmsMemberRuleSetting) error
	CreateInBatches(values []*model.UmsMemberRuleSetting, batchSize int) error
	Save(values ...*model.UmsMemberRuleSetting) error
	First() (*model.UmsMemberRuleSetting, error)
	Take() (*model.UmsMemberRuleSetting, error)
	Last() (*model.UmsMemberRuleSetting, error)
	Find() ([]*model.UmsMemberRuleSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberRuleSetting, err error)
	FindInBatches(result *[]*model.UmsMemberRuleSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberRuleSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberRuleSettingDo
	Assign(attrs ...field.AssignExpr) IUmsMemberRuleSettingDo
	Joins(fields ...field.RelationField) IUmsMemberRuleSettingDo
	Preload(fields ...field.RelationField) IUmsMemberRuleSettingDo
	FirstOrInit() (*model.UmsMemberRuleSetting, error)
	FirstOrCreate() (*model.UmsMemberRuleSetting, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberRuleSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberRuleSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberRuleSettingDo) Debug() IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberRuleSettingDo) WithContext(ctx context.Context) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberRuleSettingDo) ReadDB() IUmsMemberRuleSettingDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberRuleSettingDo) WriteDB() IUmsMemberRuleSettingDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberRuleSettingDo) Session(config *gorm.Session) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberRuleSettingDo) Clauses(conds ...clause.Expression) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberRuleSettingDo) Returning(value interface{}, columns ...string) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberRuleSettingDo) Not(conds ...gen.Condition) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberRuleSettingDo) Or(conds ...gen.Condition) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberRuleSettingDo) Select(conds ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberRuleSettingDo) Where(conds ...gen.Condition) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberRuleSettingDo) Order(conds ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberRuleSettingDo) Distinct(cols ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberRuleSettingDo) Omit(cols ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberRuleSettingDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberRuleSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberRuleSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberRuleSettingDo) Group(cols ...field.Expr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberRuleSettingDo) Having(conds ...gen.Condition) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberRuleSettingDo) Limit(limit int) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberRuleSettingDo) Offset(offset int) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberRuleSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberRuleSettingDo) Unscoped() IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberRuleSettingDo) Create(values ...*model.UmsMemberRuleSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberRuleSettingDo) CreateInBatches(values []*model.UmsMemberRuleSetting, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberRuleSettingDo) Save(values ...*model.UmsMemberRuleSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberRuleSettingDo) First() (*model.UmsMemberRuleSetting, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberRuleSetting), nil
	}
}

func (u umsMemberRuleSettingDo) Take() (*model.UmsMemberRuleSetting, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberRuleSetting), nil
	}
}

func (u umsMemberRuleSettingDo) Last() (*model.UmsMemberRuleSetting, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberRuleSetting), nil
	}
}

func (u umsMemberRuleSettingDo) Find() ([]*model.UmsMemberRuleSetting, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberRuleSetting), err
}

func (u umsMemberRuleSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberRuleSetting, err error) {
	buf := make([]*model.UmsMemberRuleSetting, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberRuleSettingDo) FindInBatches(result *[]*model.UmsMemberRuleSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberRuleSettingDo) Attrs(attrs ...field.AssignExpr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberRuleSettingDo) Assign(attrs ...field.AssignExpr) IUmsMemberRuleSettingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberRuleSettingDo) Joins(fields ...field.RelationField) IUmsMemberRuleSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberRuleSettingDo) Preload(fields ...field.RelationField) IUmsMemberRuleSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberRuleSettingDo) FirstOrInit() (*model.UmsMemberRuleSetting, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberRuleSetting), nil
	}
}

func (u umsMemberRuleSettingDo) FirstOrCreate() (*model.UmsMemberRuleSetting, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberRuleSetting), nil
	}
}

func (u umsMemberRuleSettingDo) FindByPage(offset int, limit int) (result []*model.UmsMemberRuleSetting, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberRuleSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberRuleSettingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberRuleSettingDo) Delete(models ...*model.UmsMemberRuleSetting) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberRuleSettingDo) withDO(do gen.Dao) *umsMemberRuleSettingDo {
	u.DO = *do.(*gen.DO)
	return u
}
