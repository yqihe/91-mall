// Code generated by Kitex v0.9.1. DO NOT EDIT.

package useradminservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user_admin "github.com/yqihe/91-mall/gomall/rpc_gen/kitex_gen/user-admin"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, Req *user_admin.RegisterReq, callOptions ...callopt.Option) (r *user_admin.RegisterResp, err error)
	Login(ctx context.Context, Req *user_admin.LoginReq, callOptions ...callopt.Option) (r *user_admin.LoginResp, err error)
	RefreshToken(ctx context.Context, Req *user_admin.RefreshTokenReq, callOptions ...callopt.Option) (r *user_admin.RefreshTokenResp, err error)
	GetAdminInfo(ctx context.Context, Req *user_admin.GetAdminInfoReq, callOptions ...callopt.Option) (r *user_admin.GetAdminInfoResp, err error)
	Logout(ctx context.Context, Req *user_admin.LogoutReq, callOptions ...callopt.Option) (r *user_admin.LogoutResp, err error)
	List(ctx context.Context, Req *user_admin.ListReq, callOptions ...callopt.Option) (r *user_admin.ListResp, err error)
	GetItem(ctx context.Context, Req *user_admin.GetItemReq, callOptions ...callopt.Option) (r *user_admin.GetItemResp, err error)
	Update(ctx context.Context, Req *user_admin.UpdateReq, callOptions ...callopt.Option) (r *user_admin.UpdateResp, err error)
	UpdatePassword(ctx context.Context, Req *user_admin.UpdatePasswordReq, callOptions ...callopt.Option) (r *user_admin.UpdatePasswordResp, err error)
	Delete(ctx context.Context, Req *user_admin.DeleteReq, callOptions ...callopt.Option) (r *user_admin.DeleteResp, err error)
	UpdateStatus(ctx context.Context, Req *user_admin.UpdateStatusReq, callOptions ...callopt.Option) (r *user_admin.UpdateStatusResp, err error)
	UpdateRole(ctx context.Context, Req *user_admin.UpdateRoleReq, callOptions ...callopt.Option) (r *user_admin.UpdateRoleResp, err error)
	GetRoleList(ctx context.Context, Req *user_admin.GetRoleListReq, callOptions ...callopt.Option) (r *user_admin.GetRoleListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserAdminServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserAdminServiceClient struct {
	*kClient
}

func (p *kUserAdminServiceClient) Register(ctx context.Context, Req *user_admin.RegisterReq, callOptions ...callopt.Option) (r *user_admin.RegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kUserAdminServiceClient) Login(ctx context.Context, Req *user_admin.LoginReq, callOptions ...callopt.Option) (r *user_admin.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kUserAdminServiceClient) RefreshToken(ctx context.Context, Req *user_admin.RefreshTokenReq, callOptions ...callopt.Option) (r *user_admin.RefreshTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshToken(ctx, Req)
}

func (p *kUserAdminServiceClient) GetAdminInfo(ctx context.Context, Req *user_admin.GetAdminInfoReq, callOptions ...callopt.Option) (r *user_admin.GetAdminInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAdminInfo(ctx, Req)
}

func (p *kUserAdminServiceClient) Logout(ctx context.Context, Req *user_admin.LogoutReq, callOptions ...callopt.Option) (r *user_admin.LogoutResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Logout(ctx, Req)
}

func (p *kUserAdminServiceClient) List(ctx context.Context, Req *user_admin.ListReq, callOptions ...callopt.Option) (r *user_admin.ListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.List(ctx, Req)
}

func (p *kUserAdminServiceClient) GetItem(ctx context.Context, Req *user_admin.GetItemReq, callOptions ...callopt.Option) (r *user_admin.GetItemResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetItem(ctx, Req)
}

func (p *kUserAdminServiceClient) Update(ctx context.Context, Req *user_admin.UpdateReq, callOptions ...callopt.Option) (r *user_admin.UpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Update(ctx, Req)
}

func (p *kUserAdminServiceClient) UpdatePassword(ctx context.Context, Req *user_admin.UpdatePasswordReq, callOptions ...callopt.Option) (r *user_admin.UpdatePasswordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePassword(ctx, Req)
}

func (p *kUserAdminServiceClient) Delete(ctx context.Context, Req *user_admin.DeleteReq, callOptions ...callopt.Option) (r *user_admin.DeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delete(ctx, Req)
}

func (p *kUserAdminServiceClient) UpdateStatus(ctx context.Context, Req *user_admin.UpdateStatusReq, callOptions ...callopt.Option) (r *user_admin.UpdateStatusResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateStatus(ctx, Req)
}

func (p *kUserAdminServiceClient) UpdateRole(ctx context.Context, Req *user_admin.UpdateRoleReq, callOptions ...callopt.Option) (r *user_admin.UpdateRoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRole(ctx, Req)
}

func (p *kUserAdminServiceClient) GetRoleList(ctx context.Context, Req *user_admin.GetRoleListReq, callOptions ...callopt.Option) (r *user_admin.GetRoleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoleList(ctx, Req)
}
