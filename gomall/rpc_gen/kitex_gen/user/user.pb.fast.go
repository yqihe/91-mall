// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResponse[number], err)
}

func (x *BaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UmsAdmin[number], err)
}

func (x *UmsAdmin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Icon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.NickName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.LoginTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsAdmin) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UmsMenu) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UmsMenu[number], err)
}

func (x *UmsMenu) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Level, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Icon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsMenu) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Hidden, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UmsRole) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UmsRole[number], err)
}

func (x *UmsRole) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AdminCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UmsRole) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *TokenMap) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TokenMap[number], err)
}

func (x *TokenMap) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TokenMap) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TokenHead, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BasePage) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BasePage[number], err)
}

func (x *BasePage) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PageNum, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BasePage) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BasePage) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TotalPage, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BasePage) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AdminInfoData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AdminInfoData[number], err)
}

func (x *AdminInfoData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminInfoData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Icon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminInfoData) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v UmsMenu
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Menus = append(x.Menus, &v)
	return offset, nil
}

func (x *AdminInfoData) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v UmsRole
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Roles = append(x.Roles, &v)
	return offset, nil
}

func (x *AdminListPageData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AdminListPageData[number], err)
}

func (x *AdminListPageData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BasePage
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BasePage = &v
	return offset, nil
}

func (x *AdminListPageData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UmsAdmin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *GetItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetItemReq[number], err)
}

func (x *GetItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetItemResp[number], err)
}

func (x *GetItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *GetItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UmsAdmin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *RegisterReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterReq[number], err)
}

func (x *RegisterReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Icon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.NickName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterResp[number], err)
}

func (x *RegisterResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *RegisterResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UmsAdmin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *LoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginReq[number], err)
}

func (x *LoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginResp[number], err)
}

func (x *LoginResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *LoginResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TokenMap
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *RefreshTokenReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *RefreshTokenResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshTokenResp[number], err)
}

func (x *RefreshTokenResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *RefreshTokenResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TokenMap
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *GetAdminInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetAdminInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAdminInfoResp[number], err)
}

func (x *GetAdminInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *GetAdminInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v AdminInfoData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *LogoutReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *LogoutResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LogoutResp[number], err)
}

func (x *LogoutResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *ListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReq[number], err)
}

func (x *ListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageNum, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListResp[number], err)
}

func (x *ListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *ListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v AdminListPageData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = &v
	return offset, nil
}

func (x *UpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateReq[number], err)
}

func (x *UpdateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UmsAdmin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Admin = &v
	return offset, nil
}

func (x *UpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateResp[number], err)
}

func (x *UpdateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *UpdateResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdatePasswordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePasswordReq[number], err)
}

func (x *UpdatePasswordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePasswordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePasswordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePasswordResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePasswordResp[number], err)
}

func (x *UpdatePasswordResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *UpdatePasswordResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DeleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteReq[number], err)
}

func (x *DeleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteResp[number], err)
}

func (x *DeleteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *DeleteResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateStatusReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateStatusReq[number], err)
}

func (x *UpdateStatusReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateStatusReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateStatusResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateStatusResp[number], err)
}

func (x *UpdateStatusResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *UpdateStatusResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateRoleReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRoleReq[number], err)
}

func (x *UpdateRoleReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AdminId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateRoleReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.RoleIds = append(x.RoleIds, v)
			return offset, err
		})
	return offset, err
}

func (x *UpdateRoleResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRoleResp[number], err)
}

func (x *UpdateRoleResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *UpdateRoleResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetRoleListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRoleListReq[number], err)
}

func (x *GetRoleListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AdminId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetRoleListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRoleListResp[number], err)
}

func (x *GetRoleListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *GetRoleListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UmsRole
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = append(x.Data, &v)
	return offset, nil
}

func (x *BaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *BaseResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *UmsAdmin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *UmsAdmin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UmsAdmin) fastWriteField2(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUsername())
	return offset
}

func (x *UmsAdmin) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *UmsAdmin) fastWriteField4(buf []byte) (offset int) {
	if x.Icon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetIcon())
	return offset
}

func (x *UmsAdmin) fastWriteField5(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetEmail())
	return offset
}

func (x *UmsAdmin) fastWriteField6(buf []byte) (offset int) {
	if x.NickName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetNickName())
	return offset
}

func (x *UmsAdmin) fastWriteField7(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetNote())
	return offset
}

func (x *UmsAdmin) fastWriteField8(buf []byte) (offset int) {
	if x.CreateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetCreateTime())
	return offset
}

func (x *UmsAdmin) fastWriteField9(buf []byte) (offset int) {
	if x.LoginTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetLoginTime())
	return offset
}

func (x *UmsAdmin) fastWriteField10(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 10, x.GetStatus())
	return offset
}

func (x *UmsMenu) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *UmsMenu) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UmsMenu) fastWriteField2(buf []byte) (offset int) {
	if x.ParentId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetParentId())
	return offset
}

func (x *UmsMenu) fastWriteField3(buf []byte) (offset int) {
	if x.CreateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCreateTime())
	return offset
}

func (x *UmsMenu) fastWriteField4(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetTitle())
	return offset
}

func (x *UmsMenu) fastWriteField5(buf []byte) (offset int) {
	if x.Level == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetLevel())
	return offset
}

func (x *UmsMenu) fastWriteField6(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetSort())
	return offset
}

func (x *UmsMenu) fastWriteField7(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetName())
	return offset
}

func (x *UmsMenu) fastWriteField8(buf []byte) (offset int) {
	if x.Icon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetIcon())
	return offset
}

func (x *UmsMenu) fastWriteField9(buf []byte) (offset int) {
	if x.Hidden == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetHidden())
	return offset
}

func (x *UmsRole) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UmsRole) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UmsRole) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UmsRole) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *UmsRole) fastWriteField4(buf []byte) (offset int) {
	if x.AdminCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetAdminCount())
	return offset
}

func (x *UmsRole) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *UmsRole) fastWriteField6(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetStatus())
	return offset
}

func (x *UmsRole) fastWriteField7(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetSort())
	return offset
}

func (x *TokenMap) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *TokenMap) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *TokenMap) fastWriteField2(buf []byte) (offset int) {
	if x.TokenHead == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTokenHead())
	return offset
}

func (x *BasePage) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BasePage) fastWriteField1(buf []byte) (offset int) {
	if x.PageNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetPageNum())
	return offset
}

func (x *BasePage) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *BasePage) fastWriteField3(buf []byte) (offset int) {
	if x.TotalPage == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetTotalPage())
	return offset
}

func (x *BasePage) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *AdminInfoData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *AdminInfoData) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *AdminInfoData) fastWriteField2(buf []byte) (offset int) {
	if x.Icon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetIcon())
	return offset
}

func (x *AdminInfoData) fastWriteField3(buf []byte) (offset int) {
	if x.Menus == nil {
		return offset
	}
	for i := range x.GetMenus() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetMenus()[i])
	}
	return offset
}

func (x *AdminInfoData) fastWriteField4(buf []byte) (offset int) {
	if x.Roles == nil {
		return offset
	}
	for i := range x.GetRoles() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetRoles()[i])
	}
	return offset
}

func (x *AdminListPageData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AdminListPageData) fastWriteField1(buf []byte) (offset int) {
	if x.BasePage == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBasePage())
	return offset
}

func (x *AdminListPageData) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *GetItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *GetItemResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *RegisterReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *RegisterReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *RegisterReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *RegisterReq) fastWriteField3(buf []byte) (offset int) {
	if x.Icon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetIcon())
	return offset
}

func (x *RegisterReq) fastWriteField4(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetEmail())
	return offset
}

func (x *RegisterReq) fastWriteField5(buf []byte) (offset int) {
	if x.NickName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetNickName())
	return offset
}

func (x *RegisterReq) fastWriteField6(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetNote())
	return offset
}

func (x *RegisterResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RegisterResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *RegisterResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *LoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *LoginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *LoginResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *LoginResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *RefreshTokenReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *RefreshTokenResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RefreshTokenResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *RefreshTokenResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *GetAdminInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetAdminInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAdminInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *GetAdminInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *LogoutReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *LogoutResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LogoutResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *ListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *ListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPageNum())
	return offset
}

func (x *ListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *ListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData())
	return offset
}

func (x *UpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateReq) fastWriteField2(buf []byte) (offset int) {
	if x.Admin == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAdmin())
	return offset
}

func (x *UpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *UpdateResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetData())
	return offset
}

func (x *UpdatePasswordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdatePasswordReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *UpdatePasswordReq) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *UpdatePasswordReq) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *UpdatePasswordResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdatePasswordResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *UpdatePasswordResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetData())
	return offset
}

func (x *DeleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *DeleteResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetData())
	return offset
}

func (x *UpdateStatusReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateStatusReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateStatusReq) fastWriteField2(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetStatus())
	return offset
}

func (x *UpdateStatusResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateStatusResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *UpdateStatusResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetData())
	return offset
}

func (x *UpdateRoleReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateRoleReq) fastWriteField1(buf []byte) (offset int) {
	if x.AdminId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetAdminId())
	return offset
}

func (x *UpdateRoleReq) fastWriteField2(buf []byte) (offset int) {
	if len(x.RoleIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetRoleIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetRoleIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *UpdateRoleResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateRoleResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *UpdateRoleResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetData())
	return offset
}

func (x *GetRoleListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetRoleListReq) fastWriteField1(buf []byte) (offset int) {
	if x.AdminId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetAdminId())
	return offset
}

func (x *GetRoleListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetRoleListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResp())
	return offset
}

func (x *GetRoleListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for i := range x.GetData() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetData()[i])
	}
	return offset
}

func (x *BaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResponse) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *BaseResponse) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *UmsAdmin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *UmsAdmin) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UmsAdmin) sizeField2() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUsername())
	return n
}

func (x *UmsAdmin) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *UmsAdmin) sizeField4() (n int) {
	if x.Icon == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetIcon())
	return n
}

func (x *UmsAdmin) sizeField5() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetEmail())
	return n
}

func (x *UmsAdmin) sizeField6() (n int) {
	if x.NickName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetNickName())
	return n
}

func (x *UmsAdmin) sizeField7() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetNote())
	return n
}

func (x *UmsAdmin) sizeField8() (n int) {
	if x.CreateTime == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetCreateTime())
	return n
}

func (x *UmsAdmin) sizeField9() (n int) {
	if x.LoginTime == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetLoginTime())
	return n
}

func (x *UmsAdmin) sizeField10() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(10, x.GetStatus())
	return n
}

func (x *UmsMenu) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *UmsMenu) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UmsMenu) sizeField2() (n int) {
	if x.ParentId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetParentId())
	return n
}

func (x *UmsMenu) sizeField3() (n int) {
	if x.CreateTime == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCreateTime())
	return n
}

func (x *UmsMenu) sizeField4() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetTitle())
	return n
}

func (x *UmsMenu) sizeField5() (n int) {
	if x.Level == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetLevel())
	return n
}

func (x *UmsMenu) sizeField6() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetSort())
	return n
}

func (x *UmsMenu) sizeField7() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetName())
	return n
}

func (x *UmsMenu) sizeField8() (n int) {
	if x.Icon == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetIcon())
	return n
}

func (x *UmsMenu) sizeField9() (n int) {
	if x.Hidden == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetHidden())
	return n
}

func (x *UmsRole) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UmsRole) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UmsRole) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UmsRole) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *UmsRole) sizeField4() (n int) {
	if x.AdminCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetAdminCount())
	return n
}

func (x *UmsRole) sizeField5() (n int) {
	if x.CreateTime == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCreateTime())
	return n
}

func (x *UmsRole) sizeField6() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetStatus())
	return n
}

func (x *UmsRole) sizeField7() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetSort())
	return n
}

func (x *TokenMap) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *TokenMap) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *TokenMap) sizeField2() (n int) {
	if x.TokenHead == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTokenHead())
	return n
}

func (x *BasePage) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BasePage) sizeField1() (n int) {
	if x.PageNum == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetPageNum())
	return n
}

func (x *BasePage) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *BasePage) sizeField3() (n int) {
	if x.TotalPage == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetTotalPage())
	return n
}

func (x *BasePage) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *AdminInfoData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *AdminInfoData) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *AdminInfoData) sizeField2() (n int) {
	if x.Icon == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetIcon())
	return n
}

func (x *AdminInfoData) sizeField3() (n int) {
	if x.Menus == nil {
		return n
	}
	for i := range x.GetMenus() {
		n += fastpb.SizeMessage(3, x.GetMenus()[i])
	}
	return n
}

func (x *AdminInfoData) sizeField4() (n int) {
	if x.Roles == nil {
		return n
	}
	for i := range x.GetRoles() {
		n += fastpb.SizeMessage(4, x.GetRoles()[i])
	}
	return n
}

func (x *AdminListPageData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AdminListPageData) sizeField1() (n int) {
	if x.BasePage == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBasePage())
	return n
}

func (x *AdminListPageData) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *GetItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetItemReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *GetItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetItemResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *GetItemResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *RegisterReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *RegisterReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *RegisterReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *RegisterReq) sizeField3() (n int) {
	if x.Icon == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetIcon())
	return n
}

func (x *RegisterReq) sizeField4() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetEmail())
	return n
}

func (x *RegisterReq) sizeField5() (n int) {
	if x.NickName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetNickName())
	return n
}

func (x *RegisterReq) sizeField6() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetNote())
	return n
}

func (x *RegisterResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RegisterResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *RegisterResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *LoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *LoginReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *LoginResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *LoginResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *RefreshTokenReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *RefreshTokenResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RefreshTokenResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *RefreshTokenResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *GetAdminInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetAdminInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAdminInfoResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *GetAdminInfoResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *LogoutReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *LogoutResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LogoutResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *ListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *ListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *ListReq) sizeField3() (n int) {
	if x.PageNum == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPageNum())
	return n
}

func (x *ListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *ListResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetData())
	return n
}

func (x *UpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateReq) sizeField2() (n int) {
	if x.Admin == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAdmin())
	return n
}

func (x *UpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *UpdateResp) sizeField2() (n int) {
	if x.Data == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetData())
	return n
}

func (x *UpdatePasswordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdatePasswordReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *UpdatePasswordReq) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *UpdatePasswordReq) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *UpdatePasswordResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdatePasswordResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *UpdatePasswordResp) sizeField2() (n int) {
	if x.Data == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetData())
	return n
}

func (x *DeleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *DeleteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *DeleteResp) sizeField2() (n int) {
	if x.Data == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetData())
	return n
}

func (x *UpdateStatusReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateStatusReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateStatusReq) sizeField2() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetStatus())
	return n
}

func (x *UpdateStatusResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateStatusResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *UpdateStatusResp) sizeField2() (n int) {
	if x.Data == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetData())
	return n
}

func (x *UpdateRoleReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateRoleReq) sizeField1() (n int) {
	if x.AdminId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetAdminId())
	return n
}

func (x *UpdateRoleReq) sizeField2() (n int) {
	if len(x.RoleIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetRoleIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetRoleIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *UpdateRoleResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateRoleResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *UpdateRoleResp) sizeField2() (n int) {
	if x.Data == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetData())
	return n
}

func (x *GetRoleListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetRoleListReq) sizeField1() (n int) {
	if x.AdminId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetAdminId())
	return n
}

func (x *GetRoleListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetRoleListResp) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetResp())
	return n
}

func (x *GetRoleListResp) sizeField2() (n int) {
	if x.Data == nil {
		return n
	}
	for i := range x.GetData() {
		n += fastpb.SizeMessage(2, x.GetData()[i])
	}
	return n
}

var fieldIDToName_BaseResponse = map[int32]string{
	1: "Code",
	2: "Message",
}

var fieldIDToName_UmsAdmin = map[int32]string{
	1:  "Id",
	2:  "Username",
	3:  "Password",
	4:  "Icon",
	5:  "Email",
	6:  "NickName",
	7:  "Note",
	8:  "CreateTime",
	9:  "LoginTime",
	10: "Status",
}

var fieldIDToName_UmsMenu = map[int32]string{
	1: "Id",
	2: "ParentId",
	3: "CreateTime",
	4: "Title",
	5: "Level",
	6: "Sort",
	7: "Name",
	8: "Icon",
	9: "Hidden",
}

var fieldIDToName_UmsRole = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Description",
	4: "AdminCount",
	5: "CreateTime",
	6: "Status",
	7: "Sort",
}

var fieldIDToName_TokenMap = map[int32]string{
	1: "Token",
	2: "TokenHead",
}

var fieldIDToName_BasePage = map[int32]string{
	1: "PageNum",
	2: "PageSize",
	3: "TotalPage",
	4: "Total",
}

var fieldIDToName_AdminInfoData = map[int32]string{
	1: "Username",
	2: "Icon",
	3: "Menus",
	4: "Roles",
}

var fieldIDToName_AdminListPageData = map[int32]string{
	1: "BasePage",
	2: "List",
}

var fieldIDToName_GetItemReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetItemResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_RegisterReq = map[int32]string{
	1: "Username",
	2: "Password",
	3: "Icon",
	4: "Email",
	5: "NickName",
	6: "Note",
}

var fieldIDToName_RegisterResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_LoginReq = map[int32]string{
	1: "Username",
	2: "Password",
}

var fieldIDToName_LoginResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_RefreshTokenReq = map[int32]string{}

var fieldIDToName_RefreshTokenResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_GetAdminInfoReq = map[int32]string{}

var fieldIDToName_GetAdminInfoResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_LogoutReq = map[int32]string{}

var fieldIDToName_LogoutResp = map[int32]string{
	1: "Resp",
}

var fieldIDToName_ListReq = map[int32]string{
	1: "Keyword",
	2: "PageSize",
	3: "PageNum",
}

var fieldIDToName_ListResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_UpdateReq = map[int32]string{
	1: "Id",
	2: "Admin",
}

var fieldIDToName_UpdateResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_UpdatePasswordReq = map[int32]string{
	1: "Username",
	2: "OldPassword",
	3: "NewPassword",
}

var fieldIDToName_UpdatePasswordResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_DeleteReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_UpdateStatusReq = map[int32]string{
	1: "Id",
	2: "Status",
}

var fieldIDToName_UpdateStatusResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_UpdateRoleReq = map[int32]string{
	1: "AdminId",
	2: "RoleIds",
}

var fieldIDToName_UpdateRoleResp = map[int32]string{
	1: "Resp",
	2: "Data",
}

var fieldIDToName_GetRoleListReq = map[int32]string{
	1: "AdminId",
}

var fieldIDToName_GetRoleListResp = map[int32]string{
	1: "Resp",
	2: "Data",
}
